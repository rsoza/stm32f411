
10_adc_continuous_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000130c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080014ac  080014ac  000114ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014f4  080014f4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080014f4  080014f4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014f4  080014f4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014f4  080014f4  000114f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014f8  080014f8  000114f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080014fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001558  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001558  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001181  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005ba  00000000  00000000  00021250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00021810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000110  00000000  00000000  000219a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fb51  00000000  00000000  00021ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000220f  00000000  00000000  00031601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000553c1  00000000  00000000  00033810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c50  00000000  00000000  00088bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00089824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001494 	.word	0x08001494

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001494 	.word	0x08001494

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <pa1_adc_init>:




void pa1_adc_init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	// Configure the ADC GPIO pin

	// Enable clock access to ADC pin's port: GPIOA
	RCC->APB2ENR |= GPIOAEN;
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <pa1_adc_init+0x50>)
 8000286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000288:	4a11      	ldr	r2, [pc, #68]	; (80002d0 <pa1_adc_init+0x50>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6453      	str	r3, [r2, #68]	; 0x44

	// Set the mode of PA1 to analog mode in the MODER
	GPIOA->MODER |= (1U<<2);
 8000290:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <pa1_adc_init+0x54>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0f      	ldr	r2, [pc, #60]	; (80002d4 <pa1_adc_init+0x54>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <pa1_adc_init+0x54>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0c      	ldr	r2, [pc, #48]	; (80002d4 <pa1_adc_init+0x54>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6013      	str	r3, [r2, #0]

	// Configure the ADC module
	// Enable clock access to ADC
	RCC->APB2ENR |= ADC1EN;
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <pa1_adc_init+0x50>)
 80002aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ac:	4a08      	ldr	r2, [pc, #32]	; (80002d0 <pa1_adc_init+0x50>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002b2:	6453      	str	r3, [r2, #68]	; 0x44

	// Configure ADC parameters
	ADC1->SQR3 = ADC_CH1;
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <pa1_adc_init+0x58>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 80002ba:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <pa1_adc_init+0x58>)
 80002bc:	2200      	movs	r2, #0
 80002be:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->CR2 = CR2_ADON;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <pa1_adc_init+0x58>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	609a      	str	r2, [r3, #8]
}
 80002c6:	bf00      	nop
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020000 	.word	0x40020000
 80002d8:	40012000 	.word	0x40012000

080002dc <start_converstion>:


void start_converstion(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	// enable continuous converstion
	ADC1->CR2 |= CR2_CONT;
 80002e0:	4b08      	ldr	r3, [pc, #32]	; (8000304 <start_converstion+0x28>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	4a07      	ldr	r2, [pc, #28]	; (8000304 <start_converstion+0x28>)
 80002e6:	f043 0302 	orr.w	r3, r3, #2
 80002ea:	6093      	str	r3, [r2, #8]

	// start adc convertion
	ADC1->CR2 |= CR2_SWSTART;
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <start_converstion+0x28>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <start_converstion+0x28>)
 80002f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002f6:	6093      	str	r3, [r2, #8]
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40012000 	.word	0x40012000

08000308 <adc_read>:

uint32_t adc_read(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	// wait for conversion to complete
	while(!(ADC1->SR & SR_EOC)){}
 800030c:	bf00      	nop
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <adc_read+0x20>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f003 0302 	and.w	r3, r3, #2
 8000316:	2b00      	cmp	r3, #0
 8000318:	d0f9      	beq.n	800030e <adc_read+0x6>
	// read converted result
	return (ADC1->DR);
 800031a:	4b03      	ldr	r3, [pc, #12]	; (8000328 <adc_read+0x20>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800031e:	4618      	mov	r0, r3
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40012000 	.word	0x40012000

0800032c <main>:
#include "adc.h"

uint32_t sensor_value;

int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0


	uart2_tx_init();
 8000330:	f000 f8c4 	bl	80004bc <uart2_tx_init>
	pa1_adc_init();
 8000334:	f7ff ffa4 	bl	8000280 <pa1_adc_init>

	while(1)
	{
		start_converstion();
 8000338:	f7ff ffd0 	bl	80002dc <start_converstion>
		sensor_value = adc_read();
 800033c:	f7ff ffe4 	bl	8000308 <adc_read>
 8000340:	4603      	mov	r3, r0
 8000342:	4a04      	ldr	r2, [pc, #16]	; (8000354 <main+0x28>)
 8000344:	6013      	str	r3, [r2, #0]
		printf("Sensor Value: %d\n\r", (int)sensor_value);
 8000346:	4b03      	ldr	r3, [pc, #12]	; (8000354 <main+0x28>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4619      	mov	r1, r3
 800034c:	4802      	ldr	r0, [pc, #8]	; (8000358 <main+0x2c>)
 800034e:	f000 fa2b 	bl	80007a8 <iprintf>
		start_converstion();
 8000352:	e7f1      	b.n	8000338 <main+0xc>
 8000354:	20000078 	.word	0x20000078
 8000358:	080014ac 	.word	0x080014ac

0800035c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	e00a      	b.n	8000384 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800036e:	f3af 8000 	nop.w
 8000372:	4601      	mov	r1, r0
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	60ba      	str	r2, [r7, #8]
 800037a:	b2ca      	uxtb	r2, r1
 800037c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	3301      	adds	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	429a      	cmp	r2, r3
 800038a:	dbf0      	blt.n	800036e <_read+0x12>
  }

  return len;
 800038c:	687b      	ldr	r3, [r7, #4]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b086      	sub	sp, #24
 800039a:	af00      	add	r7, sp, #0
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
 80003a6:	e009      	b.n	80003bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	1c5a      	adds	r2, r3, #1
 80003ac:	60ba      	str	r2, [r7, #8]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 f877 	bl	80004a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	3301      	adds	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	697a      	ldr	r2, [r7, #20]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	429a      	cmp	r2, r3
 80003c2:	dbf1      	blt.n	80003a8 <_write+0x12>
  }
  return len;
 80003c4:	687b      	ldr	r3, [r7, #4]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <_close>:

int _close(int file)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003da:	4618      	mov	r0, r3
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003e6:	b480      	push	{r7}
 80003e8:	b083      	sub	sp, #12
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
 80003ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003f6:	605a      	str	r2, [r3, #4]
  return 0;
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <_isatty>:

int _isatty(int file)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800040e:	2301      	movs	r3, #1
}
 8000410:	4618      	mov	r0, r3
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000428:	2300      	movs	r3, #0
}
 800042a:	4618      	mov	r0, r3
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
	...

08000438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000440:	4a14      	ldr	r2, [pc, #80]	; (8000494 <_sbrk+0x5c>)
 8000442:	4b15      	ldr	r3, [pc, #84]	; (8000498 <_sbrk+0x60>)
 8000444:	1ad3      	subs	r3, r2, r3
 8000446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800044c:	4b13      	ldr	r3, [pc, #76]	; (800049c <_sbrk+0x64>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d102      	bne.n	800045a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <_sbrk+0x64>)
 8000456:	4a12      	ldr	r2, [pc, #72]	; (80004a0 <_sbrk+0x68>)
 8000458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800045a:	4b10      	ldr	r3, [pc, #64]	; (800049c <_sbrk+0x64>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4413      	add	r3, r2
 8000462:	693a      	ldr	r2, [r7, #16]
 8000464:	429a      	cmp	r2, r3
 8000466:	d207      	bcs.n	8000478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000468:	f000 fa42 	bl	80008f0 <__errno>
 800046c:	4603      	mov	r3, r0
 800046e:	220c      	movs	r2, #12
 8000470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
 8000476:	e009      	b.n	800048c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <_sbrk+0x64>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <_sbrk+0x64>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	4a05      	ldr	r2, [pc, #20]	; (800049c <_sbrk+0x64>)
 8000488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800048a:	68fb      	ldr	r3, [r7, #12]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20020000 	.word	0x20020000
 8000498:	00000400 	.word	0x00000400
 800049c:	2000007c 	.word	0x2000007c
 80004a0:	200001d0 	.word	0x200001d0

080004a4 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f000 f851 	bl	8000554 <uart2_write>
	return ch;
 80004b2:	687b      	ldr	r3, [r7, #4]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <uart2_tx_init>:
}



void uart2_tx_init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	//1. Configure the UART GPIO pin(s) - just TX
	// Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80004c0:	4b20      	ldr	r3, [pc, #128]	; (8000544 <uart2_tx_init+0x88>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c4:	4a1f      	ldr	r2, [pc, #124]	; (8000544 <uart2_tx_init+0x88>)
 80004c6:	f043 0301 	orr.w	r3, r3, #1
 80004ca:	6313      	str	r3, [r2, #48]	; 0x30

	// Set PA2 mode to alternate function mode
	// go to ref manual:moder, identify pin2
	// moder2 has pins 4 and 5 and alternate function mode is 10
	GPIOA->MODER &=~(1U<<4);
 80004cc:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <uart2_tx_init+0x8c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a1d      	ldr	r2, [pc, #116]	; (8000548 <uart2_tx_init+0x8c>)
 80004d2:	f023 0310 	bic.w	r3, r3, #16
 80004d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <uart2_tx_init+0x8c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a1a      	ldr	r2, [pc, #104]	; (8000548 <uart2_tx_init+0x8c>)
 80004de:	f043 0320 	orr.w	r3, r3, #32
 80004e2:	6013      	str	r3, [r2, #0]
	// Set PA2 alternate function typer to UART_TX (AF07)
	// scroll down from moder to alternate function low register: AFRL takes care of pins 1-7
	// while high register is for pins 8-15
	// AFRL2 occupies bit 8-11 and we want AF7:: 0111
	// little endian
	GPIOA->AFR[0] |=  (1U<<8);
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <uart2_tx_init+0x8c>)
 80004e6:	6a1b      	ldr	r3, [r3, #32]
 80004e8:	4a17      	ldr	r2, [pc, #92]	; (8000548 <uart2_tx_init+0x8c>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<9);
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <uart2_tx_init+0x8c>)
 80004f2:	6a1b      	ldr	r3, [r3, #32]
 80004f4:	4a14      	ldr	r2, [pc, #80]	; (8000548 <uart2_tx_init+0x8c>)
 80004f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<10);
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <uart2_tx_init+0x8c>)
 80004fe:	6a1b      	ldr	r3, [r3, #32]
 8000500:	4a11      	ldr	r2, [pc, #68]	; (8000548 <uart2_tx_init+0x8c>)
 8000502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000506:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <uart2_tx_init+0x8c>)
 800050a:	6a1b      	ldr	r3, [r3, #32]
 800050c:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <uart2_tx_init+0x8c>)
 800050e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000512:	6213      	str	r3, [r2, #32]


	//2. Configure UARR module
	// Enable clock access to UART2
	RCC->APB1ENR |= UART2EN;
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <uart2_tx_init+0x88>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <uart2_tx_init+0x88>)
 800051a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40

	// Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000524:	4909      	ldr	r1, [pc, #36]	; (800054c <uart2_tx_init+0x90>)
 8000526:	480a      	ldr	r0, [pc, #40]	; (8000550 <uart2_tx_init+0x94>)
 8000528:	f000 f82c 	bl	8000584 <uart_set_baudrate>
	// Configure the transfer direction
	// just the TX
	// go to ref manual, search USART_CR1
	// bit 3 says TE: transmitter enable, set this to one to enable
	// we are erasing everything in this register to set to 1
	USART2->CR1 = CR1_TE;
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <uart2_tx_init+0x94>)
 800052e:	2208      	movs	r2, #8
 8000530:	60da      	str	r2, [r3, #12]
	// Enable the UART module, once done
	// do not want to clean everything, want to add UE bit to the state of TE
	USART2->CR1 |= CR1_UE;
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <uart2_tx_init+0x94>)
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	4a06      	ldr	r2, [pc, #24]	; (8000550 <uart2_tx_init+0x94>)
 8000538:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800053c:	60d3      	str	r3, [r2, #12]
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023800 	.word	0x40023800
 8000548:	40020000 	.word	0x40020000
 800054c:	00f42400 	.word	0x00f42400
 8000550:	40004400 	.word	0x40004400

08000554 <uart2_write>:
	// Read data
	return USART2->DR;
}

void uart2_write(int ch)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	// two registers: transmit data register and receive data register
	// this does two things:
	// 1. Make sure the transmit data register is empty
	// read bit by using and operator if the register is true it will set this bit
	while (!(USART2->SR & SR_TXE)){}
 800055c:	bf00      	nop
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <uart2_write+0x2c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0f9      	beq.n	800055e <uart2_write+0xa>

	// 2. Write to transmit data register
	// transmits 8 bits
	USART2->DR = (ch & 0xFF);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <uart2_write+0x2c>)
 800056e:	b2db      	uxtb	r3, r3
 8000570:	6053      	str	r3, [r2, #4]
	// search in the ref manual for the status register: USART_SR
	// bit 7 TXE = Transmit data register empty: make this a symbolic name

}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40004400 	.word	0x40004400

08000584 <uart_set_baudrate>:



static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000590:	6879      	ldr	r1, [r7, #4]
 8000592:	68b8      	ldr	r0, [r7, #8]
 8000594:	f000 f808 	bl	80005a8 <compute_uart_bd>
 8000598:	4603      	mov	r3, r0
 800059a:	461a      	mov	r2, r3
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	609a      	str	r2, [r3, #8]
}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/ BaudRate);
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	085a      	lsrs	r2, r3, #1
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	441a      	add	r2, r3
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c0:	b29b      	uxth	r3, r3
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <LoopForever+0x6>)
  ldr r1, =_edata
 80005da:	490d      	ldr	r1, [pc, #52]	; (8000610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <LoopForever+0xe>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f0:	4c0a      	ldr	r4, [pc, #40]	; (800061c <LoopForever+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005fe:	f000 f97d 	bl	80008fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000602:	f7ff fe93 	bl	800032c <main>

08000606 <LoopForever>:

LoopForever:
  b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   r0, =_estack
 8000608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000614:	080014fc 	.word	0x080014fc
  ldr r2, =_sbss
 8000618:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800061c:	200001cc 	.word	0x200001cc

08000620 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC_IRQHandler>
	...

08000624 <std>:
 8000624:	2300      	movs	r3, #0
 8000626:	b510      	push	{r4, lr}
 8000628:	4604      	mov	r4, r0
 800062a:	e9c0 3300 	strd	r3, r3, [r0]
 800062e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000632:	6083      	str	r3, [r0, #8]
 8000634:	8181      	strh	r1, [r0, #12]
 8000636:	6643      	str	r3, [r0, #100]	; 0x64
 8000638:	81c2      	strh	r2, [r0, #14]
 800063a:	6183      	str	r3, [r0, #24]
 800063c:	4619      	mov	r1, r3
 800063e:	2208      	movs	r2, #8
 8000640:	305c      	adds	r0, #92	; 0x5c
 8000642:	f000 f906 	bl	8000852 <memset>
 8000646:	4b0d      	ldr	r3, [pc, #52]	; (800067c <std+0x58>)
 8000648:	6263      	str	r3, [r4, #36]	; 0x24
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <std+0x5c>)
 800064c:	62a3      	str	r3, [r4, #40]	; 0x28
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <std+0x60>)
 8000650:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <std+0x64>)
 8000654:	6323      	str	r3, [r4, #48]	; 0x30
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <std+0x68>)
 8000658:	6224      	str	r4, [r4, #32]
 800065a:	429c      	cmp	r4, r3
 800065c:	d006      	beq.n	800066c <std+0x48>
 800065e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000662:	4294      	cmp	r4, r2
 8000664:	d002      	beq.n	800066c <std+0x48>
 8000666:	33d0      	adds	r3, #208	; 0xd0
 8000668:	429c      	cmp	r4, r3
 800066a:	d105      	bne.n	8000678 <std+0x54>
 800066c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000674:	f000 b966 	b.w	8000944 <__retarget_lock_init_recursive>
 8000678:	bd10      	pop	{r4, pc}
 800067a:	bf00      	nop
 800067c:	080007cd 	.word	0x080007cd
 8000680:	080007ef 	.word	0x080007ef
 8000684:	08000827 	.word	0x08000827
 8000688:	0800084b 	.word	0x0800084b
 800068c:	20000080 	.word	0x20000080

08000690 <stdio_exit_handler>:
 8000690:	4a02      	ldr	r2, [pc, #8]	; (800069c <stdio_exit_handler+0xc>)
 8000692:	4903      	ldr	r1, [pc, #12]	; (80006a0 <stdio_exit_handler+0x10>)
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <stdio_exit_handler+0x14>)
 8000696:	f000 b869 	b.w	800076c <_fwalk_sglue>
 800069a:	bf00      	nop
 800069c:	20000000 	.word	0x20000000
 80006a0:	080011f1 	.word	0x080011f1
 80006a4:	2000000c 	.word	0x2000000c

080006a8 <cleanup_stdio>:
 80006a8:	6841      	ldr	r1, [r0, #4]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <cleanup_stdio+0x34>)
 80006ac:	4299      	cmp	r1, r3
 80006ae:	b510      	push	{r4, lr}
 80006b0:	4604      	mov	r4, r0
 80006b2:	d001      	beq.n	80006b8 <cleanup_stdio+0x10>
 80006b4:	f000 fd9c 	bl	80011f0 <_fflush_r>
 80006b8:	68a1      	ldr	r1, [r4, #8]
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <cleanup_stdio+0x38>)
 80006bc:	4299      	cmp	r1, r3
 80006be:	d002      	beq.n	80006c6 <cleanup_stdio+0x1e>
 80006c0:	4620      	mov	r0, r4
 80006c2:	f000 fd95 	bl	80011f0 <_fflush_r>
 80006c6:	68e1      	ldr	r1, [r4, #12]
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <cleanup_stdio+0x3c>)
 80006ca:	4299      	cmp	r1, r3
 80006cc:	d004      	beq.n	80006d8 <cleanup_stdio+0x30>
 80006ce:	4620      	mov	r0, r4
 80006d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d4:	f000 bd8c 	b.w	80011f0 <_fflush_r>
 80006d8:	bd10      	pop	{r4, pc}
 80006da:	bf00      	nop
 80006dc:	20000080 	.word	0x20000080
 80006e0:	200000e8 	.word	0x200000e8
 80006e4:	20000150 	.word	0x20000150

080006e8 <global_stdio_init.part.0>:
 80006e8:	b510      	push	{r4, lr}
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <global_stdio_init.part.0+0x30>)
 80006ec:	4c0b      	ldr	r4, [pc, #44]	; (800071c <global_stdio_init.part.0+0x34>)
 80006ee:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <global_stdio_init.part.0+0x38>)
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	4620      	mov	r0, r4
 80006f4:	2200      	movs	r2, #0
 80006f6:	2104      	movs	r1, #4
 80006f8:	f7ff ff94 	bl	8000624 <std>
 80006fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000700:	2201      	movs	r2, #1
 8000702:	2109      	movs	r1, #9
 8000704:	f7ff ff8e 	bl	8000624 <std>
 8000708:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800070c:	2202      	movs	r2, #2
 800070e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000712:	2112      	movs	r1, #18
 8000714:	f7ff bf86 	b.w	8000624 <std>
 8000718:	200001b8 	.word	0x200001b8
 800071c:	20000080 	.word	0x20000080
 8000720:	08000691 	.word	0x08000691

08000724 <__sfp_lock_acquire>:
 8000724:	4801      	ldr	r0, [pc, #4]	; (800072c <__sfp_lock_acquire+0x8>)
 8000726:	f000 b90e 	b.w	8000946 <__retarget_lock_acquire_recursive>
 800072a:	bf00      	nop
 800072c:	200001c1 	.word	0x200001c1

08000730 <__sfp_lock_release>:
 8000730:	4801      	ldr	r0, [pc, #4]	; (8000738 <__sfp_lock_release+0x8>)
 8000732:	f000 b909 	b.w	8000948 <__retarget_lock_release_recursive>
 8000736:	bf00      	nop
 8000738:	200001c1 	.word	0x200001c1

0800073c <__sinit>:
 800073c:	b510      	push	{r4, lr}
 800073e:	4604      	mov	r4, r0
 8000740:	f7ff fff0 	bl	8000724 <__sfp_lock_acquire>
 8000744:	6a23      	ldr	r3, [r4, #32]
 8000746:	b11b      	cbz	r3, 8000750 <__sinit+0x14>
 8000748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800074c:	f7ff bff0 	b.w	8000730 <__sfp_lock_release>
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <__sinit+0x28>)
 8000752:	6223      	str	r3, [r4, #32]
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <__sinit+0x2c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1f5      	bne.n	8000748 <__sinit+0xc>
 800075c:	f7ff ffc4 	bl	80006e8 <global_stdio_init.part.0>
 8000760:	e7f2      	b.n	8000748 <__sinit+0xc>
 8000762:	bf00      	nop
 8000764:	080006a9 	.word	0x080006a9
 8000768:	200001b8 	.word	0x200001b8

0800076c <_fwalk_sglue>:
 800076c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000770:	4607      	mov	r7, r0
 8000772:	4688      	mov	r8, r1
 8000774:	4614      	mov	r4, r2
 8000776:	2600      	movs	r6, #0
 8000778:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800077c:	f1b9 0901 	subs.w	r9, r9, #1
 8000780:	d505      	bpl.n	800078e <_fwalk_sglue+0x22>
 8000782:	6824      	ldr	r4, [r4, #0]
 8000784:	2c00      	cmp	r4, #0
 8000786:	d1f7      	bne.n	8000778 <_fwalk_sglue+0xc>
 8000788:	4630      	mov	r0, r6
 800078a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800078e:	89ab      	ldrh	r3, [r5, #12]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d907      	bls.n	80007a4 <_fwalk_sglue+0x38>
 8000794:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000798:	3301      	adds	r3, #1
 800079a:	d003      	beq.n	80007a4 <_fwalk_sglue+0x38>
 800079c:	4629      	mov	r1, r5
 800079e:	4638      	mov	r0, r7
 80007a0:	47c0      	blx	r8
 80007a2:	4306      	orrs	r6, r0
 80007a4:	3568      	adds	r5, #104	; 0x68
 80007a6:	e7e9      	b.n	800077c <_fwalk_sglue+0x10>

080007a8 <iprintf>:
 80007a8:	b40f      	push	{r0, r1, r2, r3}
 80007aa:	b507      	push	{r0, r1, r2, lr}
 80007ac:	4906      	ldr	r1, [pc, #24]	; (80007c8 <iprintf+0x20>)
 80007ae:	ab04      	add	r3, sp, #16
 80007b0:	6808      	ldr	r0, [r1, #0]
 80007b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80007b6:	6881      	ldr	r1, [r0, #8]
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	f000 f9e9 	bl	8000b90 <_vfiprintf_r>
 80007be:	b003      	add	sp, #12
 80007c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80007c4:	b004      	add	sp, #16
 80007c6:	4770      	bx	lr
 80007c8:	20000058 	.word	0x20000058

080007cc <__sread>:
 80007cc:	b510      	push	{r4, lr}
 80007ce:	460c      	mov	r4, r1
 80007d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007d4:	f000 f868 	bl	80008a8 <_read_r>
 80007d8:	2800      	cmp	r0, #0
 80007da:	bfab      	itete	ge
 80007dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80007de:	89a3      	ldrhlt	r3, [r4, #12]
 80007e0:	181b      	addge	r3, r3, r0
 80007e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80007e6:	bfac      	ite	ge
 80007e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80007ea:	81a3      	strhlt	r3, [r4, #12]
 80007ec:	bd10      	pop	{r4, pc}

080007ee <__swrite>:
 80007ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007f2:	461f      	mov	r7, r3
 80007f4:	898b      	ldrh	r3, [r1, #12]
 80007f6:	05db      	lsls	r3, r3, #23
 80007f8:	4605      	mov	r5, r0
 80007fa:	460c      	mov	r4, r1
 80007fc:	4616      	mov	r6, r2
 80007fe:	d505      	bpl.n	800080c <__swrite+0x1e>
 8000800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000804:	2302      	movs	r3, #2
 8000806:	2200      	movs	r2, #0
 8000808:	f000 f83c 	bl	8000884 <_lseek_r>
 800080c:	89a3      	ldrh	r3, [r4, #12]
 800080e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000816:	81a3      	strh	r3, [r4, #12]
 8000818:	4632      	mov	r2, r6
 800081a:	463b      	mov	r3, r7
 800081c:	4628      	mov	r0, r5
 800081e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000822:	f000 b853 	b.w	80008cc <_write_r>

08000826 <__sseek>:
 8000826:	b510      	push	{r4, lr}
 8000828:	460c      	mov	r4, r1
 800082a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800082e:	f000 f829 	bl	8000884 <_lseek_r>
 8000832:	1c43      	adds	r3, r0, #1
 8000834:	89a3      	ldrh	r3, [r4, #12]
 8000836:	bf15      	itete	ne
 8000838:	6560      	strne	r0, [r4, #84]	; 0x54
 800083a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800083e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000842:	81a3      	strheq	r3, [r4, #12]
 8000844:	bf18      	it	ne
 8000846:	81a3      	strhne	r3, [r4, #12]
 8000848:	bd10      	pop	{r4, pc}

0800084a <__sclose>:
 800084a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800084e:	f000 b809 	b.w	8000864 <_close_r>

08000852 <memset>:
 8000852:	4402      	add	r2, r0
 8000854:	4603      	mov	r3, r0
 8000856:	4293      	cmp	r3, r2
 8000858:	d100      	bne.n	800085c <memset+0xa>
 800085a:	4770      	bx	lr
 800085c:	f803 1b01 	strb.w	r1, [r3], #1
 8000860:	e7f9      	b.n	8000856 <memset+0x4>
	...

08000864 <_close_r>:
 8000864:	b538      	push	{r3, r4, r5, lr}
 8000866:	4d06      	ldr	r5, [pc, #24]	; (8000880 <_close_r+0x1c>)
 8000868:	2300      	movs	r3, #0
 800086a:	4604      	mov	r4, r0
 800086c:	4608      	mov	r0, r1
 800086e:	602b      	str	r3, [r5, #0]
 8000870:	f7ff fdad 	bl	80003ce <_close>
 8000874:	1c43      	adds	r3, r0, #1
 8000876:	d102      	bne.n	800087e <_close_r+0x1a>
 8000878:	682b      	ldr	r3, [r5, #0]
 800087a:	b103      	cbz	r3, 800087e <_close_r+0x1a>
 800087c:	6023      	str	r3, [r4, #0]
 800087e:	bd38      	pop	{r3, r4, r5, pc}
 8000880:	200001bc 	.word	0x200001bc

08000884 <_lseek_r>:
 8000884:	b538      	push	{r3, r4, r5, lr}
 8000886:	4d07      	ldr	r5, [pc, #28]	; (80008a4 <_lseek_r+0x20>)
 8000888:	4604      	mov	r4, r0
 800088a:	4608      	mov	r0, r1
 800088c:	4611      	mov	r1, r2
 800088e:	2200      	movs	r2, #0
 8000890:	602a      	str	r2, [r5, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	f7ff fdc2 	bl	800041c <_lseek>
 8000898:	1c43      	adds	r3, r0, #1
 800089a:	d102      	bne.n	80008a2 <_lseek_r+0x1e>
 800089c:	682b      	ldr	r3, [r5, #0]
 800089e:	b103      	cbz	r3, 80008a2 <_lseek_r+0x1e>
 80008a0:	6023      	str	r3, [r4, #0]
 80008a2:	bd38      	pop	{r3, r4, r5, pc}
 80008a4:	200001bc 	.word	0x200001bc

080008a8 <_read_r>:
 80008a8:	b538      	push	{r3, r4, r5, lr}
 80008aa:	4d07      	ldr	r5, [pc, #28]	; (80008c8 <_read_r+0x20>)
 80008ac:	4604      	mov	r4, r0
 80008ae:	4608      	mov	r0, r1
 80008b0:	4611      	mov	r1, r2
 80008b2:	2200      	movs	r2, #0
 80008b4:	602a      	str	r2, [r5, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	f7ff fd50 	bl	800035c <_read>
 80008bc:	1c43      	adds	r3, r0, #1
 80008be:	d102      	bne.n	80008c6 <_read_r+0x1e>
 80008c0:	682b      	ldr	r3, [r5, #0]
 80008c2:	b103      	cbz	r3, 80008c6 <_read_r+0x1e>
 80008c4:	6023      	str	r3, [r4, #0]
 80008c6:	bd38      	pop	{r3, r4, r5, pc}
 80008c8:	200001bc 	.word	0x200001bc

080008cc <_write_r>:
 80008cc:	b538      	push	{r3, r4, r5, lr}
 80008ce:	4d07      	ldr	r5, [pc, #28]	; (80008ec <_write_r+0x20>)
 80008d0:	4604      	mov	r4, r0
 80008d2:	4608      	mov	r0, r1
 80008d4:	4611      	mov	r1, r2
 80008d6:	2200      	movs	r2, #0
 80008d8:	602a      	str	r2, [r5, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	f7ff fd5b 	bl	8000396 <_write>
 80008e0:	1c43      	adds	r3, r0, #1
 80008e2:	d102      	bne.n	80008ea <_write_r+0x1e>
 80008e4:	682b      	ldr	r3, [r5, #0]
 80008e6:	b103      	cbz	r3, 80008ea <_write_r+0x1e>
 80008e8:	6023      	str	r3, [r4, #0]
 80008ea:	bd38      	pop	{r3, r4, r5, pc}
 80008ec:	200001bc 	.word	0x200001bc

080008f0 <__errno>:
 80008f0:	4b01      	ldr	r3, [pc, #4]	; (80008f8 <__errno+0x8>)
 80008f2:	6818      	ldr	r0, [r3, #0]
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000058 	.word	0x20000058

080008fc <__libc_init_array>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	4d0d      	ldr	r5, [pc, #52]	; (8000934 <__libc_init_array+0x38>)
 8000900:	4c0d      	ldr	r4, [pc, #52]	; (8000938 <__libc_init_array+0x3c>)
 8000902:	1b64      	subs	r4, r4, r5
 8000904:	10a4      	asrs	r4, r4, #2
 8000906:	2600      	movs	r6, #0
 8000908:	42a6      	cmp	r6, r4
 800090a:	d109      	bne.n	8000920 <__libc_init_array+0x24>
 800090c:	4d0b      	ldr	r5, [pc, #44]	; (800093c <__libc_init_array+0x40>)
 800090e:	4c0c      	ldr	r4, [pc, #48]	; (8000940 <__libc_init_array+0x44>)
 8000910:	f000 fdc0 	bl	8001494 <_init>
 8000914:	1b64      	subs	r4, r4, r5
 8000916:	10a4      	asrs	r4, r4, #2
 8000918:	2600      	movs	r6, #0
 800091a:	42a6      	cmp	r6, r4
 800091c:	d105      	bne.n	800092a <__libc_init_array+0x2e>
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f855 3b04 	ldr.w	r3, [r5], #4
 8000924:	4798      	blx	r3
 8000926:	3601      	adds	r6, #1
 8000928:	e7ee      	b.n	8000908 <__libc_init_array+0xc>
 800092a:	f855 3b04 	ldr.w	r3, [r5], #4
 800092e:	4798      	blx	r3
 8000930:	3601      	adds	r6, #1
 8000932:	e7f2      	b.n	800091a <__libc_init_array+0x1e>
 8000934:	080014f4 	.word	0x080014f4
 8000938:	080014f4 	.word	0x080014f4
 800093c:	080014f4 	.word	0x080014f4
 8000940:	080014f8 	.word	0x080014f8

08000944 <__retarget_lock_init_recursive>:
 8000944:	4770      	bx	lr

08000946 <__retarget_lock_acquire_recursive>:
 8000946:	4770      	bx	lr

08000948 <__retarget_lock_release_recursive>:
 8000948:	4770      	bx	lr
	...

0800094c <_free_r>:
 800094c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800094e:	2900      	cmp	r1, #0
 8000950:	d044      	beq.n	80009dc <_free_r+0x90>
 8000952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000956:	9001      	str	r0, [sp, #4]
 8000958:	2b00      	cmp	r3, #0
 800095a:	f1a1 0404 	sub.w	r4, r1, #4
 800095e:	bfb8      	it	lt
 8000960:	18e4      	addlt	r4, r4, r3
 8000962:	f000 f8df 	bl	8000b24 <__malloc_lock>
 8000966:	4a1e      	ldr	r2, [pc, #120]	; (80009e0 <_free_r+0x94>)
 8000968:	9801      	ldr	r0, [sp, #4]
 800096a:	6813      	ldr	r3, [r2, #0]
 800096c:	b933      	cbnz	r3, 800097c <_free_r+0x30>
 800096e:	6063      	str	r3, [r4, #4]
 8000970:	6014      	str	r4, [r2, #0]
 8000972:	b003      	add	sp, #12
 8000974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000978:	f000 b8da 	b.w	8000b30 <__malloc_unlock>
 800097c:	42a3      	cmp	r3, r4
 800097e:	d908      	bls.n	8000992 <_free_r+0x46>
 8000980:	6825      	ldr	r5, [r4, #0]
 8000982:	1961      	adds	r1, r4, r5
 8000984:	428b      	cmp	r3, r1
 8000986:	bf01      	itttt	eq
 8000988:	6819      	ldreq	r1, [r3, #0]
 800098a:	685b      	ldreq	r3, [r3, #4]
 800098c:	1949      	addeq	r1, r1, r5
 800098e:	6021      	streq	r1, [r4, #0]
 8000990:	e7ed      	b.n	800096e <_free_r+0x22>
 8000992:	461a      	mov	r2, r3
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	b10b      	cbz	r3, 800099c <_free_r+0x50>
 8000998:	42a3      	cmp	r3, r4
 800099a:	d9fa      	bls.n	8000992 <_free_r+0x46>
 800099c:	6811      	ldr	r1, [r2, #0]
 800099e:	1855      	adds	r5, r2, r1
 80009a0:	42a5      	cmp	r5, r4
 80009a2:	d10b      	bne.n	80009bc <_free_r+0x70>
 80009a4:	6824      	ldr	r4, [r4, #0]
 80009a6:	4421      	add	r1, r4
 80009a8:	1854      	adds	r4, r2, r1
 80009aa:	42a3      	cmp	r3, r4
 80009ac:	6011      	str	r1, [r2, #0]
 80009ae:	d1e0      	bne.n	8000972 <_free_r+0x26>
 80009b0:	681c      	ldr	r4, [r3, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	6053      	str	r3, [r2, #4]
 80009b6:	440c      	add	r4, r1
 80009b8:	6014      	str	r4, [r2, #0]
 80009ba:	e7da      	b.n	8000972 <_free_r+0x26>
 80009bc:	d902      	bls.n	80009c4 <_free_r+0x78>
 80009be:	230c      	movs	r3, #12
 80009c0:	6003      	str	r3, [r0, #0]
 80009c2:	e7d6      	b.n	8000972 <_free_r+0x26>
 80009c4:	6825      	ldr	r5, [r4, #0]
 80009c6:	1961      	adds	r1, r4, r5
 80009c8:	428b      	cmp	r3, r1
 80009ca:	bf04      	itt	eq
 80009cc:	6819      	ldreq	r1, [r3, #0]
 80009ce:	685b      	ldreq	r3, [r3, #4]
 80009d0:	6063      	str	r3, [r4, #4]
 80009d2:	bf04      	itt	eq
 80009d4:	1949      	addeq	r1, r1, r5
 80009d6:	6021      	streq	r1, [r4, #0]
 80009d8:	6054      	str	r4, [r2, #4]
 80009da:	e7ca      	b.n	8000972 <_free_r+0x26>
 80009dc:	b003      	add	sp, #12
 80009de:	bd30      	pop	{r4, r5, pc}
 80009e0:	200001c4 	.word	0x200001c4

080009e4 <sbrk_aligned>:
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	4e0e      	ldr	r6, [pc, #56]	; (8000a20 <sbrk_aligned+0x3c>)
 80009e8:	460c      	mov	r4, r1
 80009ea:	6831      	ldr	r1, [r6, #0]
 80009ec:	4605      	mov	r5, r0
 80009ee:	b911      	cbnz	r1, 80009f6 <sbrk_aligned+0x12>
 80009f0:	f000 fcbc 	bl	800136c <_sbrk_r>
 80009f4:	6030      	str	r0, [r6, #0]
 80009f6:	4621      	mov	r1, r4
 80009f8:	4628      	mov	r0, r5
 80009fa:	f000 fcb7 	bl	800136c <_sbrk_r>
 80009fe:	1c43      	adds	r3, r0, #1
 8000a00:	d00a      	beq.n	8000a18 <sbrk_aligned+0x34>
 8000a02:	1cc4      	adds	r4, r0, #3
 8000a04:	f024 0403 	bic.w	r4, r4, #3
 8000a08:	42a0      	cmp	r0, r4
 8000a0a:	d007      	beq.n	8000a1c <sbrk_aligned+0x38>
 8000a0c:	1a21      	subs	r1, r4, r0
 8000a0e:	4628      	mov	r0, r5
 8000a10:	f000 fcac 	bl	800136c <_sbrk_r>
 8000a14:	3001      	adds	r0, #1
 8000a16:	d101      	bne.n	8000a1c <sbrk_aligned+0x38>
 8000a18:	f04f 34ff 	mov.w	r4, #4294967295
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	200001c8 	.word	0x200001c8

08000a24 <_malloc_r>:
 8000a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a28:	1ccd      	adds	r5, r1, #3
 8000a2a:	f025 0503 	bic.w	r5, r5, #3
 8000a2e:	3508      	adds	r5, #8
 8000a30:	2d0c      	cmp	r5, #12
 8000a32:	bf38      	it	cc
 8000a34:	250c      	movcc	r5, #12
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	4607      	mov	r7, r0
 8000a3a:	db01      	blt.n	8000a40 <_malloc_r+0x1c>
 8000a3c:	42a9      	cmp	r1, r5
 8000a3e:	d905      	bls.n	8000a4c <_malloc_r+0x28>
 8000a40:	230c      	movs	r3, #12
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	2600      	movs	r6, #0
 8000a46:	4630      	mov	r0, r6
 8000a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000b20 <_malloc_r+0xfc>
 8000a50:	f000 f868 	bl	8000b24 <__malloc_lock>
 8000a54:	f8d8 3000 	ldr.w	r3, [r8]
 8000a58:	461c      	mov	r4, r3
 8000a5a:	bb5c      	cbnz	r4, 8000ab4 <_malloc_r+0x90>
 8000a5c:	4629      	mov	r1, r5
 8000a5e:	4638      	mov	r0, r7
 8000a60:	f7ff ffc0 	bl	80009e4 <sbrk_aligned>
 8000a64:	1c43      	adds	r3, r0, #1
 8000a66:	4604      	mov	r4, r0
 8000a68:	d155      	bne.n	8000b16 <_malloc_r+0xf2>
 8000a6a:	f8d8 4000 	ldr.w	r4, [r8]
 8000a6e:	4626      	mov	r6, r4
 8000a70:	2e00      	cmp	r6, #0
 8000a72:	d145      	bne.n	8000b00 <_malloc_r+0xdc>
 8000a74:	2c00      	cmp	r4, #0
 8000a76:	d048      	beq.n	8000b0a <_malloc_r+0xe6>
 8000a78:	6823      	ldr	r3, [r4, #0]
 8000a7a:	4631      	mov	r1, r6
 8000a7c:	4638      	mov	r0, r7
 8000a7e:	eb04 0903 	add.w	r9, r4, r3
 8000a82:	f000 fc73 	bl	800136c <_sbrk_r>
 8000a86:	4581      	cmp	r9, r0
 8000a88:	d13f      	bne.n	8000b0a <_malloc_r+0xe6>
 8000a8a:	6821      	ldr	r1, [r4, #0]
 8000a8c:	1a6d      	subs	r5, r5, r1
 8000a8e:	4629      	mov	r1, r5
 8000a90:	4638      	mov	r0, r7
 8000a92:	f7ff ffa7 	bl	80009e4 <sbrk_aligned>
 8000a96:	3001      	adds	r0, #1
 8000a98:	d037      	beq.n	8000b0a <_malloc_r+0xe6>
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	442b      	add	r3, r5
 8000a9e:	6023      	str	r3, [r4, #0]
 8000aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d038      	beq.n	8000b1a <_malloc_r+0xf6>
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	42a2      	cmp	r2, r4
 8000aac:	d12b      	bne.n	8000b06 <_malloc_r+0xe2>
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	e00f      	b.n	8000ad4 <_malloc_r+0xb0>
 8000ab4:	6822      	ldr	r2, [r4, #0]
 8000ab6:	1b52      	subs	r2, r2, r5
 8000ab8:	d41f      	bmi.n	8000afa <_malloc_r+0xd6>
 8000aba:	2a0b      	cmp	r2, #11
 8000abc:	d917      	bls.n	8000aee <_malloc_r+0xca>
 8000abe:	1961      	adds	r1, r4, r5
 8000ac0:	42a3      	cmp	r3, r4
 8000ac2:	6025      	str	r5, [r4, #0]
 8000ac4:	bf18      	it	ne
 8000ac6:	6059      	strne	r1, [r3, #4]
 8000ac8:	6863      	ldr	r3, [r4, #4]
 8000aca:	bf08      	it	eq
 8000acc:	f8c8 1000 	streq.w	r1, [r8]
 8000ad0:	5162      	str	r2, [r4, r5]
 8000ad2:	604b      	str	r3, [r1, #4]
 8000ad4:	4638      	mov	r0, r7
 8000ad6:	f104 060b 	add.w	r6, r4, #11
 8000ada:	f000 f829 	bl	8000b30 <__malloc_unlock>
 8000ade:	f026 0607 	bic.w	r6, r6, #7
 8000ae2:	1d23      	adds	r3, r4, #4
 8000ae4:	1af2      	subs	r2, r6, r3
 8000ae6:	d0ae      	beq.n	8000a46 <_malloc_r+0x22>
 8000ae8:	1b9b      	subs	r3, r3, r6
 8000aea:	50a3      	str	r3, [r4, r2]
 8000aec:	e7ab      	b.n	8000a46 <_malloc_r+0x22>
 8000aee:	42a3      	cmp	r3, r4
 8000af0:	6862      	ldr	r2, [r4, #4]
 8000af2:	d1dd      	bne.n	8000ab0 <_malloc_r+0x8c>
 8000af4:	f8c8 2000 	str.w	r2, [r8]
 8000af8:	e7ec      	b.n	8000ad4 <_malloc_r+0xb0>
 8000afa:	4623      	mov	r3, r4
 8000afc:	6864      	ldr	r4, [r4, #4]
 8000afe:	e7ac      	b.n	8000a5a <_malloc_r+0x36>
 8000b00:	4634      	mov	r4, r6
 8000b02:	6876      	ldr	r6, [r6, #4]
 8000b04:	e7b4      	b.n	8000a70 <_malloc_r+0x4c>
 8000b06:	4613      	mov	r3, r2
 8000b08:	e7cc      	b.n	8000aa4 <_malloc_r+0x80>
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4638      	mov	r0, r7
 8000b10:	f000 f80e 	bl	8000b30 <__malloc_unlock>
 8000b14:	e797      	b.n	8000a46 <_malloc_r+0x22>
 8000b16:	6025      	str	r5, [r4, #0]
 8000b18:	e7dc      	b.n	8000ad4 <_malloc_r+0xb0>
 8000b1a:	605b      	str	r3, [r3, #4]
 8000b1c:	deff      	udf	#255	; 0xff
 8000b1e:	bf00      	nop
 8000b20:	200001c4 	.word	0x200001c4

08000b24 <__malloc_lock>:
 8000b24:	4801      	ldr	r0, [pc, #4]	; (8000b2c <__malloc_lock+0x8>)
 8000b26:	f7ff bf0e 	b.w	8000946 <__retarget_lock_acquire_recursive>
 8000b2a:	bf00      	nop
 8000b2c:	200001c0 	.word	0x200001c0

08000b30 <__malloc_unlock>:
 8000b30:	4801      	ldr	r0, [pc, #4]	; (8000b38 <__malloc_unlock+0x8>)
 8000b32:	f7ff bf09 	b.w	8000948 <__retarget_lock_release_recursive>
 8000b36:	bf00      	nop
 8000b38:	200001c0 	.word	0x200001c0

08000b3c <__sfputc_r>:
 8000b3c:	6893      	ldr	r3, [r2, #8]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	b410      	push	{r4}
 8000b44:	6093      	str	r3, [r2, #8]
 8000b46:	da08      	bge.n	8000b5a <__sfputc_r+0x1e>
 8000b48:	6994      	ldr	r4, [r2, #24]
 8000b4a:	42a3      	cmp	r3, r4
 8000b4c:	db01      	blt.n	8000b52 <__sfputc_r+0x16>
 8000b4e:	290a      	cmp	r1, #10
 8000b50:	d103      	bne.n	8000b5a <__sfputc_r+0x1e>
 8000b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b56:	f000 bb73 	b.w	8001240 <__swbuf_r>
 8000b5a:	6813      	ldr	r3, [r2, #0]
 8000b5c:	1c58      	adds	r0, r3, #1
 8000b5e:	6010      	str	r0, [r2, #0]
 8000b60:	7019      	strb	r1, [r3, #0]
 8000b62:	4608      	mov	r0, r1
 8000b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <__sfputs_r>:
 8000b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6c:	4606      	mov	r6, r0
 8000b6e:	460f      	mov	r7, r1
 8000b70:	4614      	mov	r4, r2
 8000b72:	18d5      	adds	r5, r2, r3
 8000b74:	42ac      	cmp	r4, r5
 8000b76:	d101      	bne.n	8000b7c <__sfputs_r+0x12>
 8000b78:	2000      	movs	r0, #0
 8000b7a:	e007      	b.n	8000b8c <__sfputs_r+0x22>
 8000b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b80:	463a      	mov	r2, r7
 8000b82:	4630      	mov	r0, r6
 8000b84:	f7ff ffda 	bl	8000b3c <__sfputc_r>
 8000b88:	1c43      	adds	r3, r0, #1
 8000b8a:	d1f3      	bne.n	8000b74 <__sfputs_r+0xa>
 8000b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b90 <_vfiprintf_r>:
 8000b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b94:	460d      	mov	r5, r1
 8000b96:	b09d      	sub	sp, #116	; 0x74
 8000b98:	4614      	mov	r4, r2
 8000b9a:	4698      	mov	r8, r3
 8000b9c:	4606      	mov	r6, r0
 8000b9e:	b118      	cbz	r0, 8000ba8 <_vfiprintf_r+0x18>
 8000ba0:	6a03      	ldr	r3, [r0, #32]
 8000ba2:	b90b      	cbnz	r3, 8000ba8 <_vfiprintf_r+0x18>
 8000ba4:	f7ff fdca 	bl	800073c <__sinit>
 8000ba8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000baa:	07d9      	lsls	r1, r3, #31
 8000bac:	d405      	bmi.n	8000bba <_vfiprintf_r+0x2a>
 8000bae:	89ab      	ldrh	r3, [r5, #12]
 8000bb0:	059a      	lsls	r2, r3, #22
 8000bb2:	d402      	bmi.n	8000bba <_vfiprintf_r+0x2a>
 8000bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bb6:	f7ff fec6 	bl	8000946 <__retarget_lock_acquire_recursive>
 8000bba:	89ab      	ldrh	r3, [r5, #12]
 8000bbc:	071b      	lsls	r3, r3, #28
 8000bbe:	d501      	bpl.n	8000bc4 <_vfiprintf_r+0x34>
 8000bc0:	692b      	ldr	r3, [r5, #16]
 8000bc2:	b99b      	cbnz	r3, 8000bec <_vfiprintf_r+0x5c>
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	f000 fb78 	bl	80012bc <__swsetup_r>
 8000bcc:	b170      	cbz	r0, 8000bec <_vfiprintf_r+0x5c>
 8000bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bd0:	07dc      	lsls	r4, r3, #31
 8000bd2:	d504      	bpl.n	8000bde <_vfiprintf_r+0x4e>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	b01d      	add	sp, #116	; 0x74
 8000bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bde:	89ab      	ldrh	r3, [r5, #12]
 8000be0:	0598      	lsls	r0, r3, #22
 8000be2:	d4f7      	bmi.n	8000bd4 <_vfiprintf_r+0x44>
 8000be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000be6:	f7ff feaf 	bl	8000948 <__retarget_lock_release_recursive>
 8000bea:	e7f3      	b.n	8000bd4 <_vfiprintf_r+0x44>
 8000bec:	2300      	movs	r3, #0
 8000bee:	9309      	str	r3, [sp, #36]	; 0x24
 8000bf0:	2320      	movs	r3, #32
 8000bf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000bf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bfa:	2330      	movs	r3, #48	; 0x30
 8000bfc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000db0 <_vfiprintf_r+0x220>
 8000c00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c04:	f04f 0901 	mov.w	r9, #1
 8000c08:	4623      	mov	r3, r4
 8000c0a:	469a      	mov	sl, r3
 8000c0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c10:	b10a      	cbz	r2, 8000c16 <_vfiprintf_r+0x86>
 8000c12:	2a25      	cmp	r2, #37	; 0x25
 8000c14:	d1f9      	bne.n	8000c0a <_vfiprintf_r+0x7a>
 8000c16:	ebba 0b04 	subs.w	fp, sl, r4
 8000c1a:	d00b      	beq.n	8000c34 <_vfiprintf_r+0xa4>
 8000c1c:	465b      	mov	r3, fp
 8000c1e:	4622      	mov	r2, r4
 8000c20:	4629      	mov	r1, r5
 8000c22:	4630      	mov	r0, r6
 8000c24:	f7ff ffa1 	bl	8000b6a <__sfputs_r>
 8000c28:	3001      	adds	r0, #1
 8000c2a:	f000 80a9 	beq.w	8000d80 <_vfiprintf_r+0x1f0>
 8000c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c30:	445a      	add	r2, fp
 8000c32:	9209      	str	r2, [sp, #36]	; 0x24
 8000c34:	f89a 3000 	ldrb.w	r3, [sl]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f000 80a1 	beq.w	8000d80 <_vfiprintf_r+0x1f0>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c48:	f10a 0a01 	add.w	sl, sl, #1
 8000c4c:	9304      	str	r3, [sp, #16]
 8000c4e:	9307      	str	r3, [sp, #28]
 8000c50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c54:	931a      	str	r3, [sp, #104]	; 0x68
 8000c56:	4654      	mov	r4, sl
 8000c58:	2205      	movs	r2, #5
 8000c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c5e:	4854      	ldr	r0, [pc, #336]	; (8000db0 <_vfiprintf_r+0x220>)
 8000c60:	f7ff fabe 	bl	80001e0 <memchr>
 8000c64:	9a04      	ldr	r2, [sp, #16]
 8000c66:	b9d8      	cbnz	r0, 8000ca0 <_vfiprintf_r+0x110>
 8000c68:	06d1      	lsls	r1, r2, #27
 8000c6a:	bf44      	itt	mi
 8000c6c:	2320      	movmi	r3, #32
 8000c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c72:	0713      	lsls	r3, r2, #28
 8000c74:	bf44      	itt	mi
 8000c76:	232b      	movmi	r3, #43	; 0x2b
 8000c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c80:	2b2a      	cmp	r3, #42	; 0x2a
 8000c82:	d015      	beq.n	8000cb0 <_vfiprintf_r+0x120>
 8000c84:	9a07      	ldr	r2, [sp, #28]
 8000c86:	4654      	mov	r4, sl
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f04f 0c0a 	mov.w	ip, #10
 8000c8e:	4621      	mov	r1, r4
 8000c90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c94:	3b30      	subs	r3, #48	; 0x30
 8000c96:	2b09      	cmp	r3, #9
 8000c98:	d94d      	bls.n	8000d36 <_vfiprintf_r+0x1a6>
 8000c9a:	b1b0      	cbz	r0, 8000cca <_vfiprintf_r+0x13a>
 8000c9c:	9207      	str	r2, [sp, #28]
 8000c9e:	e014      	b.n	8000cca <_vfiprintf_r+0x13a>
 8000ca0:	eba0 0308 	sub.w	r3, r0, r8
 8000ca4:	fa09 f303 	lsl.w	r3, r9, r3
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	9304      	str	r3, [sp, #16]
 8000cac:	46a2      	mov	sl, r4
 8000cae:	e7d2      	b.n	8000c56 <_vfiprintf_r+0xc6>
 8000cb0:	9b03      	ldr	r3, [sp, #12]
 8000cb2:	1d19      	adds	r1, r3, #4
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	9103      	str	r1, [sp, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	bfbb      	ittet	lt
 8000cbc:	425b      	neglt	r3, r3
 8000cbe:	f042 0202 	orrlt.w	r2, r2, #2
 8000cc2:	9307      	strge	r3, [sp, #28]
 8000cc4:	9307      	strlt	r3, [sp, #28]
 8000cc6:	bfb8      	it	lt
 8000cc8:	9204      	strlt	r2, [sp, #16]
 8000cca:	7823      	ldrb	r3, [r4, #0]
 8000ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8000cce:	d10c      	bne.n	8000cea <_vfiprintf_r+0x15a>
 8000cd0:	7863      	ldrb	r3, [r4, #1]
 8000cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8000cd4:	d134      	bne.n	8000d40 <_vfiprintf_r+0x1b0>
 8000cd6:	9b03      	ldr	r3, [sp, #12]
 8000cd8:	1d1a      	adds	r2, r3, #4
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	9203      	str	r2, [sp, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bfb8      	it	lt
 8000ce2:	f04f 33ff 	movlt.w	r3, #4294967295
 8000ce6:	3402      	adds	r4, #2
 8000ce8:	9305      	str	r3, [sp, #20]
 8000cea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000dc0 <_vfiprintf_r+0x230>
 8000cee:	7821      	ldrb	r1, [r4, #0]
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	4650      	mov	r0, sl
 8000cf4:	f7ff fa74 	bl	80001e0 <memchr>
 8000cf8:	b138      	cbz	r0, 8000d0a <_vfiprintf_r+0x17a>
 8000cfa:	9b04      	ldr	r3, [sp, #16]
 8000cfc:	eba0 000a 	sub.w	r0, r0, sl
 8000d00:	2240      	movs	r2, #64	; 0x40
 8000d02:	4082      	lsls	r2, r0
 8000d04:	4313      	orrs	r3, r2
 8000d06:	3401      	adds	r4, #1
 8000d08:	9304      	str	r3, [sp, #16]
 8000d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d0e:	4829      	ldr	r0, [pc, #164]	; (8000db4 <_vfiprintf_r+0x224>)
 8000d10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d14:	2206      	movs	r2, #6
 8000d16:	f7ff fa63 	bl	80001e0 <memchr>
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	d03f      	beq.n	8000d9e <_vfiprintf_r+0x20e>
 8000d1e:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <_vfiprintf_r+0x228>)
 8000d20:	bb1b      	cbnz	r3, 8000d6a <_vfiprintf_r+0x1da>
 8000d22:	9b03      	ldr	r3, [sp, #12]
 8000d24:	3307      	adds	r3, #7
 8000d26:	f023 0307 	bic.w	r3, r3, #7
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	9303      	str	r3, [sp, #12]
 8000d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d30:	443b      	add	r3, r7
 8000d32:	9309      	str	r3, [sp, #36]	; 0x24
 8000d34:	e768      	b.n	8000c08 <_vfiprintf_r+0x78>
 8000d36:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	e7a6      	b.n	8000c8e <_vfiprintf_r+0xfe>
 8000d40:	2300      	movs	r3, #0
 8000d42:	3401      	adds	r4, #1
 8000d44:	9305      	str	r3, [sp, #20]
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 0c0a 	mov.w	ip, #10
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d52:	3a30      	subs	r2, #48	; 0x30
 8000d54:	2a09      	cmp	r2, #9
 8000d56:	d903      	bls.n	8000d60 <_vfiprintf_r+0x1d0>
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0c6      	beq.n	8000cea <_vfiprintf_r+0x15a>
 8000d5c:	9105      	str	r1, [sp, #20]
 8000d5e:	e7c4      	b.n	8000cea <_vfiprintf_r+0x15a>
 8000d60:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d64:	4604      	mov	r4, r0
 8000d66:	2301      	movs	r3, #1
 8000d68:	e7f0      	b.n	8000d4c <_vfiprintf_r+0x1bc>
 8000d6a:	ab03      	add	r3, sp, #12
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	462a      	mov	r2, r5
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <_vfiprintf_r+0x22c>)
 8000d72:	a904      	add	r1, sp, #16
 8000d74:	4630      	mov	r0, r6
 8000d76:	f3af 8000 	nop.w
 8000d7a:	4607      	mov	r7, r0
 8000d7c:	1c78      	adds	r0, r7, #1
 8000d7e:	d1d6      	bne.n	8000d2e <_vfiprintf_r+0x19e>
 8000d80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d82:	07d9      	lsls	r1, r3, #31
 8000d84:	d405      	bmi.n	8000d92 <_vfiprintf_r+0x202>
 8000d86:	89ab      	ldrh	r3, [r5, #12]
 8000d88:	059a      	lsls	r2, r3, #22
 8000d8a:	d402      	bmi.n	8000d92 <_vfiprintf_r+0x202>
 8000d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d8e:	f7ff fddb 	bl	8000948 <__retarget_lock_release_recursive>
 8000d92:	89ab      	ldrh	r3, [r5, #12]
 8000d94:	065b      	lsls	r3, r3, #25
 8000d96:	f53f af1d 	bmi.w	8000bd4 <_vfiprintf_r+0x44>
 8000d9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d9c:	e71c      	b.n	8000bd8 <_vfiprintf_r+0x48>
 8000d9e:	ab03      	add	r3, sp, #12
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	462a      	mov	r2, r5
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <_vfiprintf_r+0x22c>)
 8000da6:	a904      	add	r1, sp, #16
 8000da8:	4630      	mov	r0, r6
 8000daa:	f000 f879 	bl	8000ea0 <_printf_i>
 8000dae:	e7e4      	b.n	8000d7a <_vfiprintf_r+0x1ea>
 8000db0:	080014bf 	.word	0x080014bf
 8000db4:	080014c9 	.word	0x080014c9
 8000db8:	00000000 	.word	0x00000000
 8000dbc:	08000b6b 	.word	0x08000b6b
 8000dc0:	080014c5 	.word	0x080014c5

08000dc4 <_printf_common>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	4616      	mov	r6, r2
 8000dca:	4699      	mov	r9, r3
 8000dcc:	688a      	ldr	r2, [r1, #8]
 8000dce:	690b      	ldr	r3, [r1, #16]
 8000dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	bfb8      	it	lt
 8000dd8:	4613      	movlt	r3, r2
 8000dda:	6033      	str	r3, [r6, #0]
 8000ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000de0:	4607      	mov	r7, r0
 8000de2:	460c      	mov	r4, r1
 8000de4:	b10a      	cbz	r2, 8000dea <_printf_common+0x26>
 8000de6:	3301      	adds	r3, #1
 8000de8:	6033      	str	r3, [r6, #0]
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	0699      	lsls	r1, r3, #26
 8000dee:	bf42      	ittt	mi
 8000df0:	6833      	ldrmi	r3, [r6, #0]
 8000df2:	3302      	addmi	r3, #2
 8000df4:	6033      	strmi	r3, [r6, #0]
 8000df6:	6825      	ldr	r5, [r4, #0]
 8000df8:	f015 0506 	ands.w	r5, r5, #6
 8000dfc:	d106      	bne.n	8000e0c <_printf_common+0x48>
 8000dfe:	f104 0a19 	add.w	sl, r4, #25
 8000e02:	68e3      	ldr	r3, [r4, #12]
 8000e04:	6832      	ldr	r2, [r6, #0]
 8000e06:	1a9b      	subs	r3, r3, r2
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	dc26      	bgt.n	8000e5a <_printf_common+0x96>
 8000e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e10:	1e13      	subs	r3, r2, #0
 8000e12:	6822      	ldr	r2, [r4, #0]
 8000e14:	bf18      	it	ne
 8000e16:	2301      	movne	r3, #1
 8000e18:	0692      	lsls	r2, r2, #26
 8000e1a:	d42b      	bmi.n	8000e74 <_printf_common+0xb0>
 8000e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e20:	4649      	mov	r1, r9
 8000e22:	4638      	mov	r0, r7
 8000e24:	47c0      	blx	r8
 8000e26:	3001      	adds	r0, #1
 8000e28:	d01e      	beq.n	8000e68 <_printf_common+0xa4>
 8000e2a:	6823      	ldr	r3, [r4, #0]
 8000e2c:	6922      	ldr	r2, [r4, #16]
 8000e2e:	f003 0306 	and.w	r3, r3, #6
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf02      	ittt	eq
 8000e36:	68e5      	ldreq	r5, [r4, #12]
 8000e38:	6833      	ldreq	r3, [r6, #0]
 8000e3a:	1aed      	subeq	r5, r5, r3
 8000e3c:	68a3      	ldr	r3, [r4, #8]
 8000e3e:	bf0c      	ite	eq
 8000e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e44:	2500      	movne	r5, #0
 8000e46:	4293      	cmp	r3, r2
 8000e48:	bfc4      	itt	gt
 8000e4a:	1a9b      	subgt	r3, r3, r2
 8000e4c:	18ed      	addgt	r5, r5, r3
 8000e4e:	2600      	movs	r6, #0
 8000e50:	341a      	adds	r4, #26
 8000e52:	42b5      	cmp	r5, r6
 8000e54:	d11a      	bne.n	8000e8c <_printf_common+0xc8>
 8000e56:	2000      	movs	r0, #0
 8000e58:	e008      	b.n	8000e6c <_printf_common+0xa8>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	4652      	mov	r2, sl
 8000e5e:	4649      	mov	r1, r9
 8000e60:	4638      	mov	r0, r7
 8000e62:	47c0      	blx	r8
 8000e64:	3001      	adds	r0, #1
 8000e66:	d103      	bne.n	8000e70 <_printf_common+0xac>
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e70:	3501      	adds	r5, #1
 8000e72:	e7c6      	b.n	8000e02 <_printf_common+0x3e>
 8000e74:	18e1      	adds	r1, r4, r3
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	2030      	movs	r0, #48	; 0x30
 8000e7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e7e:	4422      	add	r2, r4
 8000e80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e88:	3302      	adds	r3, #2
 8000e8a:	e7c7      	b.n	8000e1c <_printf_common+0x58>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	4622      	mov	r2, r4
 8000e90:	4649      	mov	r1, r9
 8000e92:	4638      	mov	r0, r7
 8000e94:	47c0      	blx	r8
 8000e96:	3001      	adds	r0, #1
 8000e98:	d0e6      	beq.n	8000e68 <_printf_common+0xa4>
 8000e9a:	3601      	adds	r6, #1
 8000e9c:	e7d9      	b.n	8000e52 <_printf_common+0x8e>
	...

08000ea0 <_printf_i>:
 8000ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea4:	7e0f      	ldrb	r7, [r1, #24]
 8000ea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ea8:	2f78      	cmp	r7, #120	; 0x78
 8000eaa:	4691      	mov	r9, r2
 8000eac:	4680      	mov	r8, r0
 8000eae:	460c      	mov	r4, r1
 8000eb0:	469a      	mov	sl, r3
 8000eb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000eb6:	d807      	bhi.n	8000ec8 <_printf_i+0x28>
 8000eb8:	2f62      	cmp	r7, #98	; 0x62
 8000eba:	d80a      	bhi.n	8000ed2 <_printf_i+0x32>
 8000ebc:	2f00      	cmp	r7, #0
 8000ebe:	f000 80d4 	beq.w	800106a <_printf_i+0x1ca>
 8000ec2:	2f58      	cmp	r7, #88	; 0x58
 8000ec4:	f000 80c0 	beq.w	8001048 <_printf_i+0x1a8>
 8000ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ed0:	e03a      	b.n	8000f48 <_printf_i+0xa8>
 8000ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ed6:	2b15      	cmp	r3, #21
 8000ed8:	d8f6      	bhi.n	8000ec8 <_printf_i+0x28>
 8000eda:	a101      	add	r1, pc, #4	; (adr r1, 8000ee0 <_printf_i+0x40>)
 8000edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ee0:	08000f39 	.word	0x08000f39
 8000ee4:	08000f4d 	.word	0x08000f4d
 8000ee8:	08000ec9 	.word	0x08000ec9
 8000eec:	08000ec9 	.word	0x08000ec9
 8000ef0:	08000ec9 	.word	0x08000ec9
 8000ef4:	08000ec9 	.word	0x08000ec9
 8000ef8:	08000f4d 	.word	0x08000f4d
 8000efc:	08000ec9 	.word	0x08000ec9
 8000f00:	08000ec9 	.word	0x08000ec9
 8000f04:	08000ec9 	.word	0x08000ec9
 8000f08:	08000ec9 	.word	0x08000ec9
 8000f0c:	08001051 	.word	0x08001051
 8000f10:	08000f79 	.word	0x08000f79
 8000f14:	0800100b 	.word	0x0800100b
 8000f18:	08000ec9 	.word	0x08000ec9
 8000f1c:	08000ec9 	.word	0x08000ec9
 8000f20:	08001073 	.word	0x08001073
 8000f24:	08000ec9 	.word	0x08000ec9
 8000f28:	08000f79 	.word	0x08000f79
 8000f2c:	08000ec9 	.word	0x08000ec9
 8000f30:	08000ec9 	.word	0x08000ec9
 8000f34:	08001013 	.word	0x08001013
 8000f38:	682b      	ldr	r3, [r5, #0]
 8000f3a:	1d1a      	adds	r2, r3, #4
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	602a      	str	r2, [r5, #0]
 8000f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e09f      	b.n	800108c <_printf_i+0x1ec>
 8000f4c:	6820      	ldr	r0, [r4, #0]
 8000f4e:	682b      	ldr	r3, [r5, #0]
 8000f50:	0607      	lsls	r7, r0, #24
 8000f52:	f103 0104 	add.w	r1, r3, #4
 8000f56:	6029      	str	r1, [r5, #0]
 8000f58:	d501      	bpl.n	8000f5e <_printf_i+0xbe>
 8000f5a:	681e      	ldr	r6, [r3, #0]
 8000f5c:	e003      	b.n	8000f66 <_printf_i+0xc6>
 8000f5e:	0646      	lsls	r6, r0, #25
 8000f60:	d5fb      	bpl.n	8000f5a <_printf_i+0xba>
 8000f62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000f66:	2e00      	cmp	r6, #0
 8000f68:	da03      	bge.n	8000f72 <_printf_i+0xd2>
 8000f6a:	232d      	movs	r3, #45	; 0x2d
 8000f6c:	4276      	negs	r6, r6
 8000f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f72:	485a      	ldr	r0, [pc, #360]	; (80010dc <_printf_i+0x23c>)
 8000f74:	230a      	movs	r3, #10
 8000f76:	e012      	b.n	8000f9e <_printf_i+0xfe>
 8000f78:	682b      	ldr	r3, [r5, #0]
 8000f7a:	6820      	ldr	r0, [r4, #0]
 8000f7c:	1d19      	adds	r1, r3, #4
 8000f7e:	6029      	str	r1, [r5, #0]
 8000f80:	0605      	lsls	r5, r0, #24
 8000f82:	d501      	bpl.n	8000f88 <_printf_i+0xe8>
 8000f84:	681e      	ldr	r6, [r3, #0]
 8000f86:	e002      	b.n	8000f8e <_printf_i+0xee>
 8000f88:	0641      	lsls	r1, r0, #25
 8000f8a:	d5fb      	bpl.n	8000f84 <_printf_i+0xe4>
 8000f8c:	881e      	ldrh	r6, [r3, #0]
 8000f8e:	4853      	ldr	r0, [pc, #332]	; (80010dc <_printf_i+0x23c>)
 8000f90:	2f6f      	cmp	r7, #111	; 0x6f
 8000f92:	bf0c      	ite	eq
 8000f94:	2308      	moveq	r3, #8
 8000f96:	230a      	movne	r3, #10
 8000f98:	2100      	movs	r1, #0
 8000f9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f9e:	6865      	ldr	r5, [r4, #4]
 8000fa0:	60a5      	str	r5, [r4, #8]
 8000fa2:	2d00      	cmp	r5, #0
 8000fa4:	bfa2      	ittt	ge
 8000fa6:	6821      	ldrge	r1, [r4, #0]
 8000fa8:	f021 0104 	bicge.w	r1, r1, #4
 8000fac:	6021      	strge	r1, [r4, #0]
 8000fae:	b90e      	cbnz	r6, 8000fb4 <_printf_i+0x114>
 8000fb0:	2d00      	cmp	r5, #0
 8000fb2:	d04b      	beq.n	800104c <_printf_i+0x1ac>
 8000fb4:	4615      	mov	r5, r2
 8000fb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8000fba:	fb03 6711 	mls	r7, r3, r1, r6
 8000fbe:	5dc7      	ldrb	r7, [r0, r7]
 8000fc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000fc4:	4637      	mov	r7, r6
 8000fc6:	42bb      	cmp	r3, r7
 8000fc8:	460e      	mov	r6, r1
 8000fca:	d9f4      	bls.n	8000fb6 <_printf_i+0x116>
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d10b      	bne.n	8000fe8 <_printf_i+0x148>
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	07de      	lsls	r6, r3, #31
 8000fd4:	d508      	bpl.n	8000fe8 <_printf_i+0x148>
 8000fd6:	6923      	ldr	r3, [r4, #16]
 8000fd8:	6861      	ldr	r1, [r4, #4]
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	bfde      	ittt	le
 8000fde:	2330      	movle	r3, #48	; 0x30
 8000fe0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000fe4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000fe8:	1b52      	subs	r2, r2, r5
 8000fea:	6122      	str	r2, [r4, #16]
 8000fec:	f8cd a000 	str.w	sl, [sp]
 8000ff0:	464b      	mov	r3, r9
 8000ff2:	aa03      	add	r2, sp, #12
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	4640      	mov	r0, r8
 8000ff8:	f7ff fee4 	bl	8000dc4 <_printf_common>
 8000ffc:	3001      	adds	r0, #1
 8000ffe:	d14a      	bne.n	8001096 <_printf_i+0x1f6>
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	b004      	add	sp, #16
 8001006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	f043 0320 	orr.w	r3, r3, #32
 8001010:	6023      	str	r3, [r4, #0]
 8001012:	4833      	ldr	r0, [pc, #204]	; (80010e0 <_printf_i+0x240>)
 8001014:	2778      	movs	r7, #120	; 0x78
 8001016:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800101a:	6823      	ldr	r3, [r4, #0]
 800101c:	6829      	ldr	r1, [r5, #0]
 800101e:	061f      	lsls	r7, r3, #24
 8001020:	f851 6b04 	ldr.w	r6, [r1], #4
 8001024:	d402      	bmi.n	800102c <_printf_i+0x18c>
 8001026:	065f      	lsls	r7, r3, #25
 8001028:	bf48      	it	mi
 800102a:	b2b6      	uxthmi	r6, r6
 800102c:	07df      	lsls	r7, r3, #31
 800102e:	bf48      	it	mi
 8001030:	f043 0320 	orrmi.w	r3, r3, #32
 8001034:	6029      	str	r1, [r5, #0]
 8001036:	bf48      	it	mi
 8001038:	6023      	strmi	r3, [r4, #0]
 800103a:	b91e      	cbnz	r6, 8001044 <_printf_i+0x1a4>
 800103c:	6823      	ldr	r3, [r4, #0]
 800103e:	f023 0320 	bic.w	r3, r3, #32
 8001042:	6023      	str	r3, [r4, #0]
 8001044:	2310      	movs	r3, #16
 8001046:	e7a7      	b.n	8000f98 <_printf_i+0xf8>
 8001048:	4824      	ldr	r0, [pc, #144]	; (80010dc <_printf_i+0x23c>)
 800104a:	e7e4      	b.n	8001016 <_printf_i+0x176>
 800104c:	4615      	mov	r5, r2
 800104e:	e7bd      	b.n	8000fcc <_printf_i+0x12c>
 8001050:	682b      	ldr	r3, [r5, #0]
 8001052:	6826      	ldr	r6, [r4, #0]
 8001054:	6961      	ldr	r1, [r4, #20]
 8001056:	1d18      	adds	r0, r3, #4
 8001058:	6028      	str	r0, [r5, #0]
 800105a:	0635      	lsls	r5, r6, #24
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	d501      	bpl.n	8001064 <_printf_i+0x1c4>
 8001060:	6019      	str	r1, [r3, #0]
 8001062:	e002      	b.n	800106a <_printf_i+0x1ca>
 8001064:	0670      	lsls	r0, r6, #25
 8001066:	d5fb      	bpl.n	8001060 <_printf_i+0x1c0>
 8001068:	8019      	strh	r1, [r3, #0]
 800106a:	2300      	movs	r3, #0
 800106c:	6123      	str	r3, [r4, #16]
 800106e:	4615      	mov	r5, r2
 8001070:	e7bc      	b.n	8000fec <_printf_i+0x14c>
 8001072:	682b      	ldr	r3, [r5, #0]
 8001074:	1d1a      	adds	r2, r3, #4
 8001076:	602a      	str	r2, [r5, #0]
 8001078:	681d      	ldr	r5, [r3, #0]
 800107a:	6862      	ldr	r2, [r4, #4]
 800107c:	2100      	movs	r1, #0
 800107e:	4628      	mov	r0, r5
 8001080:	f7ff f8ae 	bl	80001e0 <memchr>
 8001084:	b108      	cbz	r0, 800108a <_printf_i+0x1ea>
 8001086:	1b40      	subs	r0, r0, r5
 8001088:	6060      	str	r0, [r4, #4]
 800108a:	6863      	ldr	r3, [r4, #4]
 800108c:	6123      	str	r3, [r4, #16]
 800108e:	2300      	movs	r3, #0
 8001090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001094:	e7aa      	b.n	8000fec <_printf_i+0x14c>
 8001096:	6923      	ldr	r3, [r4, #16]
 8001098:	462a      	mov	r2, r5
 800109a:	4649      	mov	r1, r9
 800109c:	4640      	mov	r0, r8
 800109e:	47d0      	blx	sl
 80010a0:	3001      	adds	r0, #1
 80010a2:	d0ad      	beq.n	8001000 <_printf_i+0x160>
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	079b      	lsls	r3, r3, #30
 80010a8:	d413      	bmi.n	80010d2 <_printf_i+0x232>
 80010aa:	68e0      	ldr	r0, [r4, #12]
 80010ac:	9b03      	ldr	r3, [sp, #12]
 80010ae:	4298      	cmp	r0, r3
 80010b0:	bfb8      	it	lt
 80010b2:	4618      	movlt	r0, r3
 80010b4:	e7a6      	b.n	8001004 <_printf_i+0x164>
 80010b6:	2301      	movs	r3, #1
 80010b8:	4632      	mov	r2, r6
 80010ba:	4649      	mov	r1, r9
 80010bc:	4640      	mov	r0, r8
 80010be:	47d0      	blx	sl
 80010c0:	3001      	adds	r0, #1
 80010c2:	d09d      	beq.n	8001000 <_printf_i+0x160>
 80010c4:	3501      	adds	r5, #1
 80010c6:	68e3      	ldr	r3, [r4, #12]
 80010c8:	9903      	ldr	r1, [sp, #12]
 80010ca:	1a5b      	subs	r3, r3, r1
 80010cc:	42ab      	cmp	r3, r5
 80010ce:	dcf2      	bgt.n	80010b6 <_printf_i+0x216>
 80010d0:	e7eb      	b.n	80010aa <_printf_i+0x20a>
 80010d2:	2500      	movs	r5, #0
 80010d4:	f104 0619 	add.w	r6, r4, #25
 80010d8:	e7f5      	b.n	80010c6 <_printf_i+0x226>
 80010da:	bf00      	nop
 80010dc:	080014d0 	.word	0x080014d0
 80010e0:	080014e1 	.word	0x080014e1

080010e4 <__sflush_r>:
 80010e4:	898a      	ldrh	r2, [r1, #12]
 80010e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010ea:	4605      	mov	r5, r0
 80010ec:	0710      	lsls	r0, r2, #28
 80010ee:	460c      	mov	r4, r1
 80010f0:	d458      	bmi.n	80011a4 <__sflush_r+0xc0>
 80010f2:	684b      	ldr	r3, [r1, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	dc05      	bgt.n	8001104 <__sflush_r+0x20>
 80010f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	dc02      	bgt.n	8001104 <__sflush_r+0x20>
 80010fe:	2000      	movs	r0, #0
 8001100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001106:	2e00      	cmp	r6, #0
 8001108:	d0f9      	beq.n	80010fe <__sflush_r+0x1a>
 800110a:	2300      	movs	r3, #0
 800110c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001110:	682f      	ldr	r7, [r5, #0]
 8001112:	6a21      	ldr	r1, [r4, #32]
 8001114:	602b      	str	r3, [r5, #0]
 8001116:	d032      	beq.n	800117e <__sflush_r+0x9a>
 8001118:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800111a:	89a3      	ldrh	r3, [r4, #12]
 800111c:	075a      	lsls	r2, r3, #29
 800111e:	d505      	bpl.n	800112c <__sflush_r+0x48>
 8001120:	6863      	ldr	r3, [r4, #4]
 8001122:	1ac0      	subs	r0, r0, r3
 8001124:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001126:	b10b      	cbz	r3, 800112c <__sflush_r+0x48>
 8001128:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800112a:	1ac0      	subs	r0, r0, r3
 800112c:	2300      	movs	r3, #0
 800112e:	4602      	mov	r2, r0
 8001130:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001132:	6a21      	ldr	r1, [r4, #32]
 8001134:	4628      	mov	r0, r5
 8001136:	47b0      	blx	r6
 8001138:	1c43      	adds	r3, r0, #1
 800113a:	89a3      	ldrh	r3, [r4, #12]
 800113c:	d106      	bne.n	800114c <__sflush_r+0x68>
 800113e:	6829      	ldr	r1, [r5, #0]
 8001140:	291d      	cmp	r1, #29
 8001142:	d82b      	bhi.n	800119c <__sflush_r+0xb8>
 8001144:	4a29      	ldr	r2, [pc, #164]	; (80011ec <__sflush_r+0x108>)
 8001146:	410a      	asrs	r2, r1
 8001148:	07d6      	lsls	r6, r2, #31
 800114a:	d427      	bmi.n	800119c <__sflush_r+0xb8>
 800114c:	2200      	movs	r2, #0
 800114e:	6062      	str	r2, [r4, #4]
 8001150:	04d9      	lsls	r1, r3, #19
 8001152:	6922      	ldr	r2, [r4, #16]
 8001154:	6022      	str	r2, [r4, #0]
 8001156:	d504      	bpl.n	8001162 <__sflush_r+0x7e>
 8001158:	1c42      	adds	r2, r0, #1
 800115a:	d101      	bne.n	8001160 <__sflush_r+0x7c>
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	b903      	cbnz	r3, 8001162 <__sflush_r+0x7e>
 8001160:	6560      	str	r0, [r4, #84]	; 0x54
 8001162:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001164:	602f      	str	r7, [r5, #0]
 8001166:	2900      	cmp	r1, #0
 8001168:	d0c9      	beq.n	80010fe <__sflush_r+0x1a>
 800116a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800116e:	4299      	cmp	r1, r3
 8001170:	d002      	beq.n	8001178 <__sflush_r+0x94>
 8001172:	4628      	mov	r0, r5
 8001174:	f7ff fbea 	bl	800094c <_free_r>
 8001178:	2000      	movs	r0, #0
 800117a:	6360      	str	r0, [r4, #52]	; 0x34
 800117c:	e7c0      	b.n	8001100 <__sflush_r+0x1c>
 800117e:	2301      	movs	r3, #1
 8001180:	4628      	mov	r0, r5
 8001182:	47b0      	blx	r6
 8001184:	1c41      	adds	r1, r0, #1
 8001186:	d1c8      	bne.n	800111a <__sflush_r+0x36>
 8001188:	682b      	ldr	r3, [r5, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0c5      	beq.n	800111a <__sflush_r+0x36>
 800118e:	2b1d      	cmp	r3, #29
 8001190:	d001      	beq.n	8001196 <__sflush_r+0xb2>
 8001192:	2b16      	cmp	r3, #22
 8001194:	d101      	bne.n	800119a <__sflush_r+0xb6>
 8001196:	602f      	str	r7, [r5, #0]
 8001198:	e7b1      	b.n	80010fe <__sflush_r+0x1a>
 800119a:	89a3      	ldrh	r3, [r4, #12]
 800119c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a0:	81a3      	strh	r3, [r4, #12]
 80011a2:	e7ad      	b.n	8001100 <__sflush_r+0x1c>
 80011a4:	690f      	ldr	r7, [r1, #16]
 80011a6:	2f00      	cmp	r7, #0
 80011a8:	d0a9      	beq.n	80010fe <__sflush_r+0x1a>
 80011aa:	0793      	lsls	r3, r2, #30
 80011ac:	680e      	ldr	r6, [r1, #0]
 80011ae:	bf08      	it	eq
 80011b0:	694b      	ldreq	r3, [r1, #20]
 80011b2:	600f      	str	r7, [r1, #0]
 80011b4:	bf18      	it	ne
 80011b6:	2300      	movne	r3, #0
 80011b8:	eba6 0807 	sub.w	r8, r6, r7
 80011bc:	608b      	str	r3, [r1, #8]
 80011be:	f1b8 0f00 	cmp.w	r8, #0
 80011c2:	dd9c      	ble.n	80010fe <__sflush_r+0x1a>
 80011c4:	6a21      	ldr	r1, [r4, #32]
 80011c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80011c8:	4643      	mov	r3, r8
 80011ca:	463a      	mov	r2, r7
 80011cc:	4628      	mov	r0, r5
 80011ce:	47b0      	blx	r6
 80011d0:	2800      	cmp	r0, #0
 80011d2:	dc06      	bgt.n	80011e2 <__sflush_r+0xfe>
 80011d4:	89a3      	ldrh	r3, [r4, #12]
 80011d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011da:	81a3      	strh	r3, [r4, #12]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	e78e      	b.n	8001100 <__sflush_r+0x1c>
 80011e2:	4407      	add	r7, r0
 80011e4:	eba8 0800 	sub.w	r8, r8, r0
 80011e8:	e7e9      	b.n	80011be <__sflush_r+0xda>
 80011ea:	bf00      	nop
 80011ec:	dfbffffe 	.word	0xdfbffffe

080011f0 <_fflush_r>:
 80011f0:	b538      	push	{r3, r4, r5, lr}
 80011f2:	690b      	ldr	r3, [r1, #16]
 80011f4:	4605      	mov	r5, r0
 80011f6:	460c      	mov	r4, r1
 80011f8:	b913      	cbnz	r3, 8001200 <_fflush_r+0x10>
 80011fa:	2500      	movs	r5, #0
 80011fc:	4628      	mov	r0, r5
 80011fe:	bd38      	pop	{r3, r4, r5, pc}
 8001200:	b118      	cbz	r0, 800120a <_fflush_r+0x1a>
 8001202:	6a03      	ldr	r3, [r0, #32]
 8001204:	b90b      	cbnz	r3, 800120a <_fflush_r+0x1a>
 8001206:	f7ff fa99 	bl	800073c <__sinit>
 800120a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f3      	beq.n	80011fa <_fflush_r+0xa>
 8001212:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001214:	07d0      	lsls	r0, r2, #31
 8001216:	d404      	bmi.n	8001222 <_fflush_r+0x32>
 8001218:	0599      	lsls	r1, r3, #22
 800121a:	d402      	bmi.n	8001222 <_fflush_r+0x32>
 800121c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800121e:	f7ff fb92 	bl	8000946 <__retarget_lock_acquire_recursive>
 8001222:	4628      	mov	r0, r5
 8001224:	4621      	mov	r1, r4
 8001226:	f7ff ff5d 	bl	80010e4 <__sflush_r>
 800122a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800122c:	07da      	lsls	r2, r3, #31
 800122e:	4605      	mov	r5, r0
 8001230:	d4e4      	bmi.n	80011fc <_fflush_r+0xc>
 8001232:	89a3      	ldrh	r3, [r4, #12]
 8001234:	059b      	lsls	r3, r3, #22
 8001236:	d4e1      	bmi.n	80011fc <_fflush_r+0xc>
 8001238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800123a:	f7ff fb85 	bl	8000948 <__retarget_lock_release_recursive>
 800123e:	e7dd      	b.n	80011fc <_fflush_r+0xc>

08001240 <__swbuf_r>:
 8001240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001242:	460e      	mov	r6, r1
 8001244:	4614      	mov	r4, r2
 8001246:	4605      	mov	r5, r0
 8001248:	b118      	cbz	r0, 8001252 <__swbuf_r+0x12>
 800124a:	6a03      	ldr	r3, [r0, #32]
 800124c:	b90b      	cbnz	r3, 8001252 <__swbuf_r+0x12>
 800124e:	f7ff fa75 	bl	800073c <__sinit>
 8001252:	69a3      	ldr	r3, [r4, #24]
 8001254:	60a3      	str	r3, [r4, #8]
 8001256:	89a3      	ldrh	r3, [r4, #12]
 8001258:	071a      	lsls	r2, r3, #28
 800125a:	d525      	bpl.n	80012a8 <__swbuf_r+0x68>
 800125c:	6923      	ldr	r3, [r4, #16]
 800125e:	b31b      	cbz	r3, 80012a8 <__swbuf_r+0x68>
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	6922      	ldr	r2, [r4, #16]
 8001264:	1a98      	subs	r0, r3, r2
 8001266:	6963      	ldr	r3, [r4, #20]
 8001268:	b2f6      	uxtb	r6, r6
 800126a:	4283      	cmp	r3, r0
 800126c:	4637      	mov	r7, r6
 800126e:	dc04      	bgt.n	800127a <__swbuf_r+0x3a>
 8001270:	4621      	mov	r1, r4
 8001272:	4628      	mov	r0, r5
 8001274:	f7ff ffbc 	bl	80011f0 <_fflush_r>
 8001278:	b9e0      	cbnz	r0, 80012b4 <__swbuf_r+0x74>
 800127a:	68a3      	ldr	r3, [r4, #8]
 800127c:	3b01      	subs	r3, #1
 800127e:	60a3      	str	r3, [r4, #8]
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	6022      	str	r2, [r4, #0]
 8001286:	701e      	strb	r6, [r3, #0]
 8001288:	6962      	ldr	r2, [r4, #20]
 800128a:	1c43      	adds	r3, r0, #1
 800128c:	429a      	cmp	r2, r3
 800128e:	d004      	beq.n	800129a <__swbuf_r+0x5a>
 8001290:	89a3      	ldrh	r3, [r4, #12]
 8001292:	07db      	lsls	r3, r3, #31
 8001294:	d506      	bpl.n	80012a4 <__swbuf_r+0x64>
 8001296:	2e0a      	cmp	r6, #10
 8001298:	d104      	bne.n	80012a4 <__swbuf_r+0x64>
 800129a:	4621      	mov	r1, r4
 800129c:	4628      	mov	r0, r5
 800129e:	f7ff ffa7 	bl	80011f0 <_fflush_r>
 80012a2:	b938      	cbnz	r0, 80012b4 <__swbuf_r+0x74>
 80012a4:	4638      	mov	r0, r7
 80012a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a8:	4621      	mov	r1, r4
 80012aa:	4628      	mov	r0, r5
 80012ac:	f000 f806 	bl	80012bc <__swsetup_r>
 80012b0:	2800      	cmp	r0, #0
 80012b2:	d0d5      	beq.n	8001260 <__swbuf_r+0x20>
 80012b4:	f04f 37ff 	mov.w	r7, #4294967295
 80012b8:	e7f4      	b.n	80012a4 <__swbuf_r+0x64>
	...

080012bc <__swsetup_r>:
 80012bc:	b538      	push	{r3, r4, r5, lr}
 80012be:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <__swsetup_r+0xac>)
 80012c0:	4605      	mov	r5, r0
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	460c      	mov	r4, r1
 80012c6:	b118      	cbz	r0, 80012d0 <__swsetup_r+0x14>
 80012c8:	6a03      	ldr	r3, [r0, #32]
 80012ca:	b90b      	cbnz	r3, 80012d0 <__swsetup_r+0x14>
 80012cc:	f7ff fa36 	bl	800073c <__sinit>
 80012d0:	89a3      	ldrh	r3, [r4, #12]
 80012d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012d6:	0718      	lsls	r0, r3, #28
 80012d8:	d422      	bmi.n	8001320 <__swsetup_r+0x64>
 80012da:	06d9      	lsls	r1, r3, #27
 80012dc:	d407      	bmi.n	80012ee <__swsetup_r+0x32>
 80012de:	2309      	movs	r3, #9
 80012e0:	602b      	str	r3, [r5, #0]
 80012e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80012e6:	81a3      	strh	r3, [r4, #12]
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	e034      	b.n	8001358 <__swsetup_r+0x9c>
 80012ee:	0758      	lsls	r0, r3, #29
 80012f0:	d512      	bpl.n	8001318 <__swsetup_r+0x5c>
 80012f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012f4:	b141      	cbz	r1, 8001308 <__swsetup_r+0x4c>
 80012f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012fa:	4299      	cmp	r1, r3
 80012fc:	d002      	beq.n	8001304 <__swsetup_r+0x48>
 80012fe:	4628      	mov	r0, r5
 8001300:	f7ff fb24 	bl	800094c <_free_r>
 8001304:	2300      	movs	r3, #0
 8001306:	6363      	str	r3, [r4, #52]	; 0x34
 8001308:	89a3      	ldrh	r3, [r4, #12]
 800130a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800130e:	81a3      	strh	r3, [r4, #12]
 8001310:	2300      	movs	r3, #0
 8001312:	6063      	str	r3, [r4, #4]
 8001314:	6923      	ldr	r3, [r4, #16]
 8001316:	6023      	str	r3, [r4, #0]
 8001318:	89a3      	ldrh	r3, [r4, #12]
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	81a3      	strh	r3, [r4, #12]
 8001320:	6923      	ldr	r3, [r4, #16]
 8001322:	b94b      	cbnz	r3, 8001338 <__swsetup_r+0x7c>
 8001324:	89a3      	ldrh	r3, [r4, #12]
 8001326:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800132a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800132e:	d003      	beq.n	8001338 <__swsetup_r+0x7c>
 8001330:	4621      	mov	r1, r4
 8001332:	4628      	mov	r0, r5
 8001334:	f000 f850 	bl	80013d8 <__smakebuf_r>
 8001338:	89a0      	ldrh	r0, [r4, #12]
 800133a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800133e:	f010 0301 	ands.w	r3, r0, #1
 8001342:	d00a      	beq.n	800135a <__swsetup_r+0x9e>
 8001344:	2300      	movs	r3, #0
 8001346:	60a3      	str	r3, [r4, #8]
 8001348:	6963      	ldr	r3, [r4, #20]
 800134a:	425b      	negs	r3, r3
 800134c:	61a3      	str	r3, [r4, #24]
 800134e:	6923      	ldr	r3, [r4, #16]
 8001350:	b943      	cbnz	r3, 8001364 <__swsetup_r+0xa8>
 8001352:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001356:	d1c4      	bne.n	80012e2 <__swsetup_r+0x26>
 8001358:	bd38      	pop	{r3, r4, r5, pc}
 800135a:	0781      	lsls	r1, r0, #30
 800135c:	bf58      	it	pl
 800135e:	6963      	ldrpl	r3, [r4, #20]
 8001360:	60a3      	str	r3, [r4, #8]
 8001362:	e7f4      	b.n	800134e <__swsetup_r+0x92>
 8001364:	2000      	movs	r0, #0
 8001366:	e7f7      	b.n	8001358 <__swsetup_r+0x9c>
 8001368:	20000058 	.word	0x20000058

0800136c <_sbrk_r>:
 800136c:	b538      	push	{r3, r4, r5, lr}
 800136e:	4d06      	ldr	r5, [pc, #24]	; (8001388 <_sbrk_r+0x1c>)
 8001370:	2300      	movs	r3, #0
 8001372:	4604      	mov	r4, r0
 8001374:	4608      	mov	r0, r1
 8001376:	602b      	str	r3, [r5, #0]
 8001378:	f7ff f85e 	bl	8000438 <_sbrk>
 800137c:	1c43      	adds	r3, r0, #1
 800137e:	d102      	bne.n	8001386 <_sbrk_r+0x1a>
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	b103      	cbz	r3, 8001386 <_sbrk_r+0x1a>
 8001384:	6023      	str	r3, [r4, #0]
 8001386:	bd38      	pop	{r3, r4, r5, pc}
 8001388:	200001bc 	.word	0x200001bc

0800138c <__swhatbuf_r>:
 800138c:	b570      	push	{r4, r5, r6, lr}
 800138e:	460c      	mov	r4, r1
 8001390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001394:	2900      	cmp	r1, #0
 8001396:	b096      	sub	sp, #88	; 0x58
 8001398:	4615      	mov	r5, r2
 800139a:	461e      	mov	r6, r3
 800139c:	da0d      	bge.n	80013ba <__swhatbuf_r+0x2e>
 800139e:	89a3      	ldrh	r3, [r4, #12]
 80013a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80013a4:	f04f 0100 	mov.w	r1, #0
 80013a8:	bf0c      	ite	eq
 80013aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80013ae:	2340      	movne	r3, #64	; 0x40
 80013b0:	2000      	movs	r0, #0
 80013b2:	6031      	str	r1, [r6, #0]
 80013b4:	602b      	str	r3, [r5, #0]
 80013b6:	b016      	add	sp, #88	; 0x58
 80013b8:	bd70      	pop	{r4, r5, r6, pc}
 80013ba:	466a      	mov	r2, sp
 80013bc:	f000 f848 	bl	8001450 <_fstat_r>
 80013c0:	2800      	cmp	r0, #0
 80013c2:	dbec      	blt.n	800139e <__swhatbuf_r+0x12>
 80013c4:	9901      	ldr	r1, [sp, #4]
 80013c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80013ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80013ce:	4259      	negs	r1, r3
 80013d0:	4159      	adcs	r1, r3
 80013d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d6:	e7eb      	b.n	80013b0 <__swhatbuf_r+0x24>

080013d8 <__smakebuf_r>:
 80013d8:	898b      	ldrh	r3, [r1, #12]
 80013da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013dc:	079d      	lsls	r5, r3, #30
 80013de:	4606      	mov	r6, r0
 80013e0:	460c      	mov	r4, r1
 80013e2:	d507      	bpl.n	80013f4 <__smakebuf_r+0x1c>
 80013e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80013e8:	6023      	str	r3, [r4, #0]
 80013ea:	6123      	str	r3, [r4, #16]
 80013ec:	2301      	movs	r3, #1
 80013ee:	6163      	str	r3, [r4, #20]
 80013f0:	b002      	add	sp, #8
 80013f2:	bd70      	pop	{r4, r5, r6, pc}
 80013f4:	ab01      	add	r3, sp, #4
 80013f6:	466a      	mov	r2, sp
 80013f8:	f7ff ffc8 	bl	800138c <__swhatbuf_r>
 80013fc:	9900      	ldr	r1, [sp, #0]
 80013fe:	4605      	mov	r5, r0
 8001400:	4630      	mov	r0, r6
 8001402:	f7ff fb0f 	bl	8000a24 <_malloc_r>
 8001406:	b948      	cbnz	r0, 800141c <__smakebuf_r+0x44>
 8001408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800140c:	059a      	lsls	r2, r3, #22
 800140e:	d4ef      	bmi.n	80013f0 <__smakebuf_r+0x18>
 8001410:	f023 0303 	bic.w	r3, r3, #3
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	81a3      	strh	r3, [r4, #12]
 800141a:	e7e3      	b.n	80013e4 <__smakebuf_r+0xc>
 800141c:	89a3      	ldrh	r3, [r4, #12]
 800141e:	6020      	str	r0, [r4, #0]
 8001420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001424:	81a3      	strh	r3, [r4, #12]
 8001426:	9b00      	ldr	r3, [sp, #0]
 8001428:	6163      	str	r3, [r4, #20]
 800142a:	9b01      	ldr	r3, [sp, #4]
 800142c:	6120      	str	r0, [r4, #16]
 800142e:	b15b      	cbz	r3, 8001448 <__smakebuf_r+0x70>
 8001430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001434:	4630      	mov	r0, r6
 8001436:	f000 f81d 	bl	8001474 <_isatty_r>
 800143a:	b128      	cbz	r0, 8001448 <__smakebuf_r+0x70>
 800143c:	89a3      	ldrh	r3, [r4, #12]
 800143e:	f023 0303 	bic.w	r3, r3, #3
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	81a3      	strh	r3, [r4, #12]
 8001448:	89a3      	ldrh	r3, [r4, #12]
 800144a:	431d      	orrs	r5, r3
 800144c:	81a5      	strh	r5, [r4, #12]
 800144e:	e7cf      	b.n	80013f0 <__smakebuf_r+0x18>

08001450 <_fstat_r>:
 8001450:	b538      	push	{r3, r4, r5, lr}
 8001452:	4d07      	ldr	r5, [pc, #28]	; (8001470 <_fstat_r+0x20>)
 8001454:	2300      	movs	r3, #0
 8001456:	4604      	mov	r4, r0
 8001458:	4608      	mov	r0, r1
 800145a:	4611      	mov	r1, r2
 800145c:	602b      	str	r3, [r5, #0]
 800145e:	f7fe ffc2 	bl	80003e6 <_fstat>
 8001462:	1c43      	adds	r3, r0, #1
 8001464:	d102      	bne.n	800146c <_fstat_r+0x1c>
 8001466:	682b      	ldr	r3, [r5, #0]
 8001468:	b103      	cbz	r3, 800146c <_fstat_r+0x1c>
 800146a:	6023      	str	r3, [r4, #0]
 800146c:	bd38      	pop	{r3, r4, r5, pc}
 800146e:	bf00      	nop
 8001470:	200001bc 	.word	0x200001bc

08001474 <_isatty_r>:
 8001474:	b538      	push	{r3, r4, r5, lr}
 8001476:	4d06      	ldr	r5, [pc, #24]	; (8001490 <_isatty_r+0x1c>)
 8001478:	2300      	movs	r3, #0
 800147a:	4604      	mov	r4, r0
 800147c:	4608      	mov	r0, r1
 800147e:	602b      	str	r3, [r5, #0]
 8001480:	f7fe ffc1 	bl	8000406 <_isatty>
 8001484:	1c43      	adds	r3, r0, #1
 8001486:	d102      	bne.n	800148e <_isatty_r+0x1a>
 8001488:	682b      	ldr	r3, [r5, #0]
 800148a:	b103      	cbz	r3, 800148e <_isatty_r+0x1a>
 800148c:	6023      	str	r3, [r4, #0]
 800148e:	bd38      	pop	{r3, r4, r5, pc}
 8001490:	200001bc 	.word	0x200001bc

08001494 <_init>:
 8001494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001496:	bf00      	nop
 8001498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800149a:	bc08      	pop	{r3}
 800149c:	469e      	mov	lr, r3
 800149e:	4770      	bx	lr

080014a0 <_fini>:
 80014a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a2:	bf00      	nop
 80014a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014a6:	bc08      	pop	{r3}
 80014a8:	469e      	mov	lr, r3
 80014aa:	4770      	bx	lr
