
19_timer_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000133c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080014dc  080014dc  000114dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001524  08001524  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001524  08001524  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001524  08001524  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001524  08001524  00011524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001528  08001528  00011528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800152c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001588  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001588  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017c2  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000066f  00000000  00000000  00021891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  00021f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000011c  00000000  00000000  000220a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002030  00000000  00000000  000221bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002251  00000000  00000000  000241ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00055818  00000000  00000000  0002643d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c8c  00000000  00000000  0007bc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0007c8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080014c4 	.word	0x080014c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080014c4 	.word	0x080014c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#define LED		PIN5

static void tim2_callback(void);

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <main+0x34>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <main+0x34>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= (1U<<10);
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <main+0x38>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a08      	ldr	r2, [pc, #32]	; (80002b8 <main+0x38>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~ (1U<<11);
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <main+0x38>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <main+0x38>)
 80002a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002a6:	6013      	str	r3, [r2, #0]

	uart2_tx_init();
 80002a8:	f000 f920 	bl	80004ec <uart2_tx_init>
	tim2_1hz_interrupt_init();
 80002ac:	f000 f8e8 	bl	8000480 <tim2_1hz_interrupt_init>

	while(1)
 80002b0:	e7fe      	b.n	80002b0 <main+0x30>
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000

080002bc <tim2_callback>:

	}
}

static void tim2_callback(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	printf("A second passed! \n\r");
 80002c0:	4805      	ldr	r0, [pc, #20]	; (80002d8 <tim2_callback+0x1c>)
 80002c2:	f000 fa89 	bl	80007d8 <iprintf>
	GPIOA->ODR ^=LED;
 80002c6:	4b05      	ldr	r3, [pc, #20]	; (80002dc <tim2_callback+0x20>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a04      	ldr	r2, [pc, #16]	; (80002dc <tim2_callback+0x20>)
 80002cc:	f083 0320 	eor.w	r3, r3, #32
 80002d0:	6153      	str	r3, [r2, #20]
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	080014dc 	.word	0x080014dc
 80002dc:	40020000 	.word	0x40020000

080002e0 <TIM2_IRQHandler>:


//background thread
void TIM2_IRQHandler(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	// clear update interrupt flag through the SR
	TIM2->SR &=~ SR_UIF;
 80002e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e8:	691b      	ldr	r3, [r3, #16]
 80002ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ee:	f023 0301 	bic.w	r3, r3, #1
 80002f2:	6113      	str	r3, [r2, #16]

	//Do something..
	tim2_callback();
 80002f4:	f7ff ffe2 	bl	80002bc <tim2_callback>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}

080002fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
 8000302:	60f8      	str	r0, [r7, #12]
 8000304:	60b9      	str	r1, [r7, #8]
 8000306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000308:	2300      	movs	r3, #0
 800030a:	617b      	str	r3, [r7, #20]
 800030c:	e00a      	b.n	8000324 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800030e:	f3af 8000 	nop.w
 8000312:	4601      	mov	r1, r0
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	1c5a      	adds	r2, r3, #1
 8000318:	60ba      	str	r2, [r7, #8]
 800031a:	b2ca      	uxtb	r2, r1
 800031c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	3301      	adds	r3, #1
 8000322:	617b      	str	r3, [r7, #20]
 8000324:	697a      	ldr	r2, [r7, #20]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	429a      	cmp	r2, r3
 800032a:	dbf0      	blt.n	800030e <_read+0x12>
  }

  return len;
 800032c:	687b      	ldr	r3, [r7, #4]
}
 800032e:	4618      	mov	r0, r3
 8000330:	3718      	adds	r7, #24
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	b086      	sub	sp, #24
 800033a:	af00      	add	r7, sp, #0
 800033c:	60f8      	str	r0, [r7, #12]
 800033e:	60b9      	str	r1, [r7, #8]
 8000340:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
 8000346:	e009      	b.n	800035c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	1c5a      	adds	r2, r3, #1
 800034c:	60ba      	str	r2, [r7, #8]
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f8bf 	bl	80004d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	3301      	adds	r3, #1
 800035a:	617b      	str	r3, [r7, #20]
 800035c:	697a      	ldr	r2, [r7, #20]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	429a      	cmp	r2, r3
 8000362:	dbf1      	blt.n	8000348 <_write+0x12>
  }
  return len;
 8000364:	687b      	ldr	r3, [r7, #4]
}
 8000366:	4618      	mov	r0, r3
 8000368:	3718      	adds	r7, #24
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <_close>:

int _close(int file)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800037a:	4618      	mov	r0, r3
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr

08000386 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000386:	b480      	push	{r7}
 8000388:	b083      	sub	sp, #12
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
 800038e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000396:	605a      	str	r2, [r3, #4]
  return 0;
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <_isatty>:

int _isatty(int file)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003ae:	2301      	movs	r3, #1
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003c8:	2300      	movs	r3, #0
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	3714      	adds	r7, #20
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
	...

080003d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003e0:	4a14      	ldr	r2, [pc, #80]	; (8000434 <_sbrk+0x5c>)
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <_sbrk+0x60>)
 80003e4:	1ad3      	subs	r3, r2, r3
 80003e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <_sbrk+0x64>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d102      	bne.n	80003fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <_sbrk+0x64>)
 80003f6:	4a12      	ldr	r2, [pc, #72]	; (8000440 <_sbrk+0x68>)
 80003f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003fa:	4b10      	ldr	r3, [pc, #64]	; (800043c <_sbrk+0x64>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4413      	add	r3, r2
 8000402:	693a      	ldr	r2, [r7, #16]
 8000404:	429a      	cmp	r2, r3
 8000406:	d207      	bcs.n	8000418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000408:	f000 fa8a 	bl	8000920 <__errno>
 800040c:	4603      	mov	r3, r0
 800040e:	220c      	movs	r2, #12
 8000410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000412:	f04f 33ff 	mov.w	r3, #4294967295
 8000416:	e009      	b.n	800042c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <_sbrk+0x64>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800041e:	4b07      	ldr	r3, [pc, #28]	; (800043c <_sbrk+0x64>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	4a05      	ldr	r2, [pc, #20]	; (800043c <_sbrk+0x64>)
 8000428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800042a:	68fb      	ldr	r3, [r7, #12]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3718      	adds	r7, #24
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20020000 	.word	0x20020000
 8000438:	00000400 	.word	0x00000400
 800043c:	20000078 	.word	0x20000078
 8000440:	200001c8 	.word	0x200001c8

08000444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800044e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000452:	2b00      	cmp	r3, #0
 8000454:	db0b      	blt.n	800046e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	f003 021f 	and.w	r2, r3, #31
 800045c:	4907      	ldr	r1, [pc, #28]	; (800047c <__NVIC_EnableIRQ+0x38>)
 800045e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000462:	095b      	lsrs	r3, r3, #5
 8000464:	2001      	movs	r0, #1
 8000466:	fa00 f202 	lsl.w	r2, r0, r2
 800046a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	e000e100 	.word	0xe000e100

08000480 <tim2_1hz_interrupt_init>:
}



void tim2_1hz_interrupt_init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0

	//enable clock access to timer 2
	RCC->APB1ENR |= TIM2EN;
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <tim2_1hz_interrupt_init+0x50>)
 8000486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000488:	4a11      	ldr	r2, [pc, #68]	; (80004d0 <tim2_1hz_interrupt_init+0x50>)
 800048a:	f043 0301 	orr.w	r3, r3, #1
 800048e:	6413      	str	r3, [r2, #64]	; 0x40

	// set prescaler value, minus 1 because we start from zero
	TIM2->PSC = 1600 -1; //16 000 000 / 1600 = 10 000
 8000490:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000494:	f240 623f 	movw	r2, #1599	; 0x63f
 8000498:	629a      	str	r2, [r3, #40]	; 0x28

	// set auto-reload value
	TIM2->ARR = 10000 - 1;
 800049a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800049e:	f242 720f 	movw	r2, #9999	; 0x270f
 80004a2:	62da      	str	r2, [r3, #44]	; 0x2c

	// clear timer counter
	// in ref manual search timx_cr1
	// CEN = counter
	TIM2->CNT = 0;
 80004a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004a8:	2200      	movs	r2, #0
 80004aa:	625a      	str	r2, [r3, #36]	; 0x24

	// enable the timer
	TIM2->CR1 = CR1_CEN;
 80004ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004b0:	2201      	movs	r2, #1
 80004b2:	601a      	str	r2, [r3, #0]

	//ENABLE TIM INTERRUPT
	// GO TO REF MAN: UNPATE TIMX_DIER
	// UIE: UPDATE INTERRUPT ENABLE
	TIM2->DIER |= DIER_UIE;
 80004b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	60d3      	str	r3, [r2, #12]

	//ENABLE TIM INTTERRUPT IN NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 80004c4:	201c      	movs	r0, #28
 80004c6:	f7ff ffbd 	bl	8000444 <__NVIC_EnableIRQ>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40023800 	.word	0x40023800

080004d4 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f000 f851 	bl	8000584 <uart2_write>
	return ch;
 80004e2:	687b      	ldr	r3, [r7, #4]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <uart2_tx_init>:
}



void uart2_tx_init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	//1. Configure the UART GPIO pin(s) - just TX
	// Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80004f0:	4b20      	ldr	r3, [pc, #128]	; (8000574 <uart2_tx_init+0x88>)
 80004f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f4:	4a1f      	ldr	r2, [pc, #124]	; (8000574 <uart2_tx_init+0x88>)
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	6313      	str	r3, [r2, #48]	; 0x30

	// Set PA2 mode to alternate function mode
	// go to ref manual:moder, identify pin2
	// moder2 has pins 4 and 5 and alternate function mode is 10
	GPIOA->MODER &=~(1U<<4);
 80004fc:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <uart2_tx_init+0x8c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a1d      	ldr	r2, [pc, #116]	; (8000578 <uart2_tx_init+0x8c>)
 8000502:	f023 0310 	bic.w	r3, r3, #16
 8000506:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <uart2_tx_init+0x8c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a1a      	ldr	r2, [pc, #104]	; (8000578 <uart2_tx_init+0x8c>)
 800050e:	f043 0320 	orr.w	r3, r3, #32
 8000512:	6013      	str	r3, [r2, #0]
	// Set PA2 alternate function typer to UART_TX (AF07)
	// scroll down from moder to alternate function low register: AFRL takes care of pins 1-7
	// while high register is for pins 8-15
	// AFRL2 occupies bit 8-11 and we want AF7:: 0111
	// little endian
	GPIOA->AFR[0] |=  (1U<<8);
 8000514:	4b18      	ldr	r3, [pc, #96]	; (8000578 <uart2_tx_init+0x8c>)
 8000516:	6a1b      	ldr	r3, [r3, #32]
 8000518:	4a17      	ldr	r2, [pc, #92]	; (8000578 <uart2_tx_init+0x8c>)
 800051a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800051e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<9);
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <uart2_tx_init+0x8c>)
 8000522:	6a1b      	ldr	r3, [r3, #32]
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <uart2_tx_init+0x8c>)
 8000526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800052a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<10);
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <uart2_tx_init+0x8c>)
 800052e:	6a1b      	ldr	r3, [r3, #32]
 8000530:	4a11      	ldr	r2, [pc, #68]	; (8000578 <uart2_tx_init+0x8c>)
 8000532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000536:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <uart2_tx_init+0x8c>)
 800053a:	6a1b      	ldr	r3, [r3, #32]
 800053c:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <uart2_tx_init+0x8c>)
 800053e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000542:	6213      	str	r3, [r2, #32]


	//2. Configure UARR module
	// Enable clock access to UART2
	RCC->APB1ENR |= UART2EN;
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <uart2_tx_init+0x88>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <uart2_tx_init+0x88>)
 800054a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40

	// Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000554:	4909      	ldr	r1, [pc, #36]	; (800057c <uart2_tx_init+0x90>)
 8000556:	480a      	ldr	r0, [pc, #40]	; (8000580 <uart2_tx_init+0x94>)
 8000558:	f000 f82c 	bl	80005b4 <uart_set_baudrate>
	// Configure the transfer direction
	// just the TX
	// go to ref manual, search USART_CR1
	// bit 3 says TE: transmitter enable, set this to one to enable
	// we are erasing everything in this register to set to 1
	USART2->CR1 = CR1_TE;
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <uart2_tx_init+0x94>)
 800055e:	2208      	movs	r2, #8
 8000560:	60da      	str	r2, [r3, #12]
	// Enable the UART module, once done
	// do not want to clean everything, want to add UE bit to the state of TE
	USART2->CR1 |= CR1_UE;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <uart2_tx_init+0x94>)
 8000564:	68db      	ldr	r3, [r3, #12]
 8000566:	4a06      	ldr	r2, [pc, #24]	; (8000580 <uart2_tx_init+0x94>)
 8000568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800056c:	60d3      	str	r3, [r2, #12]
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40023800 	.word	0x40023800
 8000578:	40020000 	.word	0x40020000
 800057c:	00f42400 	.word	0x00f42400
 8000580:	40004400 	.word	0x40004400

08000584 <uart2_write>:
	// Read data
	return USART2->DR;
}

void uart2_write(int ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	// two registers: transmit data register and receive data register
	// this does two things:
	// 1. Make sure the transmit data register is empty
	// read bit by using and operator if the register is true it will set this bit
	while (!(USART2->SR & SR_TXE)){}
 800058c:	bf00      	nop
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <uart2_write+0x2c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f9      	beq.n	800058e <uart2_write+0xa>

	// 2. Write to transmit data register
	// transmits 8 bits
	USART2->DR = (ch & 0xFF);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <uart2_write+0x2c>)
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	6053      	str	r3, [r2, #4]
	// search in the ref manual for the status register: USART_SR
	// bit 7 TXE = Transmit data register empty: make this a symbolic name

}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40004400 	.word	0x40004400

080005b4 <uart_set_baudrate>:



static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80005c0:	6879      	ldr	r1, [r7, #4]
 80005c2:	68b8      	ldr	r0, [r7, #8]
 80005c4:	f000 f808 	bl	80005d8 <compute_uart_bd>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	609a      	str	r2, [r3, #8]
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/ BaudRate);
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	085a      	lsrs	r2, r3, #1
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	441a      	add	r2, r3
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f0:	b29b      	uxth	r3, r3
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000602:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000604:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <LoopForever+0x6>)
  ldr r1, =_edata
 800060a:	490d      	ldr	r1, [pc, #52]	; (8000640 <LoopForever+0xa>)
  ldr r2, =_sidata
 800060c:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <LoopForever+0xe>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000620:	4c0a      	ldr	r4, [pc, #40]	; (800064c <LoopForever+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800062e:	f000 f97d 	bl	800092c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000632:	f7ff fe25 	bl	8000280 <main>

08000636 <LoopForever>:

LoopForever:
  b LoopForever
 8000636:	e7fe      	b.n	8000636 <LoopForever>
  ldr   r0, =_estack
 8000638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000644:	0800152c 	.word	0x0800152c
  ldr r2, =_sbss
 8000648:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800064c:	200001c8 	.word	0x200001c8

08000650 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC_IRQHandler>
	...

08000654 <std>:
 8000654:	2300      	movs	r3, #0
 8000656:	b510      	push	{r4, lr}
 8000658:	4604      	mov	r4, r0
 800065a:	e9c0 3300 	strd	r3, r3, [r0]
 800065e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000662:	6083      	str	r3, [r0, #8]
 8000664:	8181      	strh	r1, [r0, #12]
 8000666:	6643      	str	r3, [r0, #100]	; 0x64
 8000668:	81c2      	strh	r2, [r0, #14]
 800066a:	6183      	str	r3, [r0, #24]
 800066c:	4619      	mov	r1, r3
 800066e:	2208      	movs	r2, #8
 8000670:	305c      	adds	r0, #92	; 0x5c
 8000672:	f000 f906 	bl	8000882 <memset>
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <std+0x58>)
 8000678:	6263      	str	r3, [r4, #36]	; 0x24
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <std+0x5c>)
 800067c:	62a3      	str	r3, [r4, #40]	; 0x28
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <std+0x60>)
 8000680:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <std+0x64>)
 8000684:	6323      	str	r3, [r4, #48]	; 0x30
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <std+0x68>)
 8000688:	6224      	str	r4, [r4, #32]
 800068a:	429c      	cmp	r4, r3
 800068c:	d006      	beq.n	800069c <std+0x48>
 800068e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000692:	4294      	cmp	r4, r2
 8000694:	d002      	beq.n	800069c <std+0x48>
 8000696:	33d0      	adds	r3, #208	; 0xd0
 8000698:	429c      	cmp	r4, r3
 800069a:	d105      	bne.n	80006a8 <std+0x54>
 800069c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80006a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a4:	f000 b966 	b.w	8000974 <__retarget_lock_init_recursive>
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	bf00      	nop
 80006ac:	080007fd 	.word	0x080007fd
 80006b0:	0800081f 	.word	0x0800081f
 80006b4:	08000857 	.word	0x08000857
 80006b8:	0800087b 	.word	0x0800087b
 80006bc:	2000007c 	.word	0x2000007c

080006c0 <stdio_exit_handler>:
 80006c0:	4a02      	ldr	r2, [pc, #8]	; (80006cc <stdio_exit_handler+0xc>)
 80006c2:	4903      	ldr	r1, [pc, #12]	; (80006d0 <stdio_exit_handler+0x10>)
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <stdio_exit_handler+0x14>)
 80006c6:	f000 b869 	b.w	800079c <_fwalk_sglue>
 80006ca:	bf00      	nop
 80006cc:	20000000 	.word	0x20000000
 80006d0:	08001221 	.word	0x08001221
 80006d4:	2000000c 	.word	0x2000000c

080006d8 <cleanup_stdio>:
 80006d8:	6841      	ldr	r1, [r0, #4]
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <cleanup_stdio+0x34>)
 80006dc:	4299      	cmp	r1, r3
 80006de:	b510      	push	{r4, lr}
 80006e0:	4604      	mov	r4, r0
 80006e2:	d001      	beq.n	80006e8 <cleanup_stdio+0x10>
 80006e4:	f000 fd9c 	bl	8001220 <_fflush_r>
 80006e8:	68a1      	ldr	r1, [r4, #8]
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <cleanup_stdio+0x38>)
 80006ec:	4299      	cmp	r1, r3
 80006ee:	d002      	beq.n	80006f6 <cleanup_stdio+0x1e>
 80006f0:	4620      	mov	r0, r4
 80006f2:	f000 fd95 	bl	8001220 <_fflush_r>
 80006f6:	68e1      	ldr	r1, [r4, #12]
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <cleanup_stdio+0x3c>)
 80006fa:	4299      	cmp	r1, r3
 80006fc:	d004      	beq.n	8000708 <cleanup_stdio+0x30>
 80006fe:	4620      	mov	r0, r4
 8000700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000704:	f000 bd8c 	b.w	8001220 <_fflush_r>
 8000708:	bd10      	pop	{r4, pc}
 800070a:	bf00      	nop
 800070c:	2000007c 	.word	0x2000007c
 8000710:	200000e4 	.word	0x200000e4
 8000714:	2000014c 	.word	0x2000014c

08000718 <global_stdio_init.part.0>:
 8000718:	b510      	push	{r4, lr}
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <global_stdio_init.part.0+0x30>)
 800071c:	4c0b      	ldr	r4, [pc, #44]	; (800074c <global_stdio_init.part.0+0x34>)
 800071e:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <global_stdio_init.part.0+0x38>)
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	4620      	mov	r0, r4
 8000724:	2200      	movs	r2, #0
 8000726:	2104      	movs	r1, #4
 8000728:	f7ff ff94 	bl	8000654 <std>
 800072c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000730:	2201      	movs	r2, #1
 8000732:	2109      	movs	r1, #9
 8000734:	f7ff ff8e 	bl	8000654 <std>
 8000738:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800073c:	2202      	movs	r2, #2
 800073e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000742:	2112      	movs	r1, #18
 8000744:	f7ff bf86 	b.w	8000654 <std>
 8000748:	200001b4 	.word	0x200001b4
 800074c:	2000007c 	.word	0x2000007c
 8000750:	080006c1 	.word	0x080006c1

08000754 <__sfp_lock_acquire>:
 8000754:	4801      	ldr	r0, [pc, #4]	; (800075c <__sfp_lock_acquire+0x8>)
 8000756:	f000 b90e 	b.w	8000976 <__retarget_lock_acquire_recursive>
 800075a:	bf00      	nop
 800075c:	200001bd 	.word	0x200001bd

08000760 <__sfp_lock_release>:
 8000760:	4801      	ldr	r0, [pc, #4]	; (8000768 <__sfp_lock_release+0x8>)
 8000762:	f000 b909 	b.w	8000978 <__retarget_lock_release_recursive>
 8000766:	bf00      	nop
 8000768:	200001bd 	.word	0x200001bd

0800076c <__sinit>:
 800076c:	b510      	push	{r4, lr}
 800076e:	4604      	mov	r4, r0
 8000770:	f7ff fff0 	bl	8000754 <__sfp_lock_acquire>
 8000774:	6a23      	ldr	r3, [r4, #32]
 8000776:	b11b      	cbz	r3, 8000780 <__sinit+0x14>
 8000778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800077c:	f7ff bff0 	b.w	8000760 <__sfp_lock_release>
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <__sinit+0x28>)
 8000782:	6223      	str	r3, [r4, #32]
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <__sinit+0x2c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1f5      	bne.n	8000778 <__sinit+0xc>
 800078c:	f7ff ffc4 	bl	8000718 <global_stdio_init.part.0>
 8000790:	e7f2      	b.n	8000778 <__sinit+0xc>
 8000792:	bf00      	nop
 8000794:	080006d9 	.word	0x080006d9
 8000798:	200001b4 	.word	0x200001b4

0800079c <_fwalk_sglue>:
 800079c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007a0:	4607      	mov	r7, r0
 80007a2:	4688      	mov	r8, r1
 80007a4:	4614      	mov	r4, r2
 80007a6:	2600      	movs	r6, #0
 80007a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007ac:	f1b9 0901 	subs.w	r9, r9, #1
 80007b0:	d505      	bpl.n	80007be <_fwalk_sglue+0x22>
 80007b2:	6824      	ldr	r4, [r4, #0]
 80007b4:	2c00      	cmp	r4, #0
 80007b6:	d1f7      	bne.n	80007a8 <_fwalk_sglue+0xc>
 80007b8:	4630      	mov	r0, r6
 80007ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007be:	89ab      	ldrh	r3, [r5, #12]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d907      	bls.n	80007d4 <_fwalk_sglue+0x38>
 80007c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007c8:	3301      	adds	r3, #1
 80007ca:	d003      	beq.n	80007d4 <_fwalk_sglue+0x38>
 80007cc:	4629      	mov	r1, r5
 80007ce:	4638      	mov	r0, r7
 80007d0:	47c0      	blx	r8
 80007d2:	4306      	orrs	r6, r0
 80007d4:	3568      	adds	r5, #104	; 0x68
 80007d6:	e7e9      	b.n	80007ac <_fwalk_sglue+0x10>

080007d8 <iprintf>:
 80007d8:	b40f      	push	{r0, r1, r2, r3}
 80007da:	b507      	push	{r0, r1, r2, lr}
 80007dc:	4906      	ldr	r1, [pc, #24]	; (80007f8 <iprintf+0x20>)
 80007de:	ab04      	add	r3, sp, #16
 80007e0:	6808      	ldr	r0, [r1, #0]
 80007e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80007e6:	6881      	ldr	r1, [r0, #8]
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	f000 f9e9 	bl	8000bc0 <_vfiprintf_r>
 80007ee:	b003      	add	sp, #12
 80007f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr
 80007f8:	20000058 	.word	0x20000058

080007fc <__sread>:
 80007fc:	b510      	push	{r4, lr}
 80007fe:	460c      	mov	r4, r1
 8000800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000804:	f000 f868 	bl	80008d8 <_read_r>
 8000808:	2800      	cmp	r0, #0
 800080a:	bfab      	itete	ge
 800080c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800080e:	89a3      	ldrhlt	r3, [r4, #12]
 8000810:	181b      	addge	r3, r3, r0
 8000812:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000816:	bfac      	ite	ge
 8000818:	6563      	strge	r3, [r4, #84]	; 0x54
 800081a:	81a3      	strhlt	r3, [r4, #12]
 800081c:	bd10      	pop	{r4, pc}

0800081e <__swrite>:
 800081e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000822:	461f      	mov	r7, r3
 8000824:	898b      	ldrh	r3, [r1, #12]
 8000826:	05db      	lsls	r3, r3, #23
 8000828:	4605      	mov	r5, r0
 800082a:	460c      	mov	r4, r1
 800082c:	4616      	mov	r6, r2
 800082e:	d505      	bpl.n	800083c <__swrite+0x1e>
 8000830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000834:	2302      	movs	r3, #2
 8000836:	2200      	movs	r2, #0
 8000838:	f000 f83c 	bl	80008b4 <_lseek_r>
 800083c:	89a3      	ldrh	r3, [r4, #12]
 800083e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000846:	81a3      	strh	r3, [r4, #12]
 8000848:	4632      	mov	r2, r6
 800084a:	463b      	mov	r3, r7
 800084c:	4628      	mov	r0, r5
 800084e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000852:	f000 b853 	b.w	80008fc <_write_r>

08000856 <__sseek>:
 8000856:	b510      	push	{r4, lr}
 8000858:	460c      	mov	r4, r1
 800085a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800085e:	f000 f829 	bl	80008b4 <_lseek_r>
 8000862:	1c43      	adds	r3, r0, #1
 8000864:	89a3      	ldrh	r3, [r4, #12]
 8000866:	bf15      	itete	ne
 8000868:	6560      	strne	r0, [r4, #84]	; 0x54
 800086a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800086e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000872:	81a3      	strheq	r3, [r4, #12]
 8000874:	bf18      	it	ne
 8000876:	81a3      	strhne	r3, [r4, #12]
 8000878:	bd10      	pop	{r4, pc}

0800087a <__sclose>:
 800087a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800087e:	f000 b809 	b.w	8000894 <_close_r>

08000882 <memset>:
 8000882:	4402      	add	r2, r0
 8000884:	4603      	mov	r3, r0
 8000886:	4293      	cmp	r3, r2
 8000888:	d100      	bne.n	800088c <memset+0xa>
 800088a:	4770      	bx	lr
 800088c:	f803 1b01 	strb.w	r1, [r3], #1
 8000890:	e7f9      	b.n	8000886 <memset+0x4>
	...

08000894 <_close_r>:
 8000894:	b538      	push	{r3, r4, r5, lr}
 8000896:	4d06      	ldr	r5, [pc, #24]	; (80008b0 <_close_r+0x1c>)
 8000898:	2300      	movs	r3, #0
 800089a:	4604      	mov	r4, r0
 800089c:	4608      	mov	r0, r1
 800089e:	602b      	str	r3, [r5, #0]
 80008a0:	f7ff fd65 	bl	800036e <_close>
 80008a4:	1c43      	adds	r3, r0, #1
 80008a6:	d102      	bne.n	80008ae <_close_r+0x1a>
 80008a8:	682b      	ldr	r3, [r5, #0]
 80008aa:	b103      	cbz	r3, 80008ae <_close_r+0x1a>
 80008ac:	6023      	str	r3, [r4, #0]
 80008ae:	bd38      	pop	{r3, r4, r5, pc}
 80008b0:	200001b8 	.word	0x200001b8

080008b4 <_lseek_r>:
 80008b4:	b538      	push	{r3, r4, r5, lr}
 80008b6:	4d07      	ldr	r5, [pc, #28]	; (80008d4 <_lseek_r+0x20>)
 80008b8:	4604      	mov	r4, r0
 80008ba:	4608      	mov	r0, r1
 80008bc:	4611      	mov	r1, r2
 80008be:	2200      	movs	r2, #0
 80008c0:	602a      	str	r2, [r5, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	f7ff fd7a 	bl	80003bc <_lseek>
 80008c8:	1c43      	adds	r3, r0, #1
 80008ca:	d102      	bne.n	80008d2 <_lseek_r+0x1e>
 80008cc:	682b      	ldr	r3, [r5, #0]
 80008ce:	b103      	cbz	r3, 80008d2 <_lseek_r+0x1e>
 80008d0:	6023      	str	r3, [r4, #0]
 80008d2:	bd38      	pop	{r3, r4, r5, pc}
 80008d4:	200001b8 	.word	0x200001b8

080008d8 <_read_r>:
 80008d8:	b538      	push	{r3, r4, r5, lr}
 80008da:	4d07      	ldr	r5, [pc, #28]	; (80008f8 <_read_r+0x20>)
 80008dc:	4604      	mov	r4, r0
 80008de:	4608      	mov	r0, r1
 80008e0:	4611      	mov	r1, r2
 80008e2:	2200      	movs	r2, #0
 80008e4:	602a      	str	r2, [r5, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	f7ff fd08 	bl	80002fc <_read>
 80008ec:	1c43      	adds	r3, r0, #1
 80008ee:	d102      	bne.n	80008f6 <_read_r+0x1e>
 80008f0:	682b      	ldr	r3, [r5, #0]
 80008f2:	b103      	cbz	r3, 80008f6 <_read_r+0x1e>
 80008f4:	6023      	str	r3, [r4, #0]
 80008f6:	bd38      	pop	{r3, r4, r5, pc}
 80008f8:	200001b8 	.word	0x200001b8

080008fc <_write_r>:
 80008fc:	b538      	push	{r3, r4, r5, lr}
 80008fe:	4d07      	ldr	r5, [pc, #28]	; (800091c <_write_r+0x20>)
 8000900:	4604      	mov	r4, r0
 8000902:	4608      	mov	r0, r1
 8000904:	4611      	mov	r1, r2
 8000906:	2200      	movs	r2, #0
 8000908:	602a      	str	r2, [r5, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	f7ff fd13 	bl	8000336 <_write>
 8000910:	1c43      	adds	r3, r0, #1
 8000912:	d102      	bne.n	800091a <_write_r+0x1e>
 8000914:	682b      	ldr	r3, [r5, #0]
 8000916:	b103      	cbz	r3, 800091a <_write_r+0x1e>
 8000918:	6023      	str	r3, [r4, #0]
 800091a:	bd38      	pop	{r3, r4, r5, pc}
 800091c:	200001b8 	.word	0x200001b8

08000920 <__errno>:
 8000920:	4b01      	ldr	r3, [pc, #4]	; (8000928 <__errno+0x8>)
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000058 	.word	0x20000058

0800092c <__libc_init_array>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	4d0d      	ldr	r5, [pc, #52]	; (8000964 <__libc_init_array+0x38>)
 8000930:	4c0d      	ldr	r4, [pc, #52]	; (8000968 <__libc_init_array+0x3c>)
 8000932:	1b64      	subs	r4, r4, r5
 8000934:	10a4      	asrs	r4, r4, #2
 8000936:	2600      	movs	r6, #0
 8000938:	42a6      	cmp	r6, r4
 800093a:	d109      	bne.n	8000950 <__libc_init_array+0x24>
 800093c:	4d0b      	ldr	r5, [pc, #44]	; (800096c <__libc_init_array+0x40>)
 800093e:	4c0c      	ldr	r4, [pc, #48]	; (8000970 <__libc_init_array+0x44>)
 8000940:	f000 fdc0 	bl	80014c4 <_init>
 8000944:	1b64      	subs	r4, r4, r5
 8000946:	10a4      	asrs	r4, r4, #2
 8000948:	2600      	movs	r6, #0
 800094a:	42a6      	cmp	r6, r4
 800094c:	d105      	bne.n	800095a <__libc_init_array+0x2e>
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f855 3b04 	ldr.w	r3, [r5], #4
 8000954:	4798      	blx	r3
 8000956:	3601      	adds	r6, #1
 8000958:	e7ee      	b.n	8000938 <__libc_init_array+0xc>
 800095a:	f855 3b04 	ldr.w	r3, [r5], #4
 800095e:	4798      	blx	r3
 8000960:	3601      	adds	r6, #1
 8000962:	e7f2      	b.n	800094a <__libc_init_array+0x1e>
 8000964:	08001524 	.word	0x08001524
 8000968:	08001524 	.word	0x08001524
 800096c:	08001524 	.word	0x08001524
 8000970:	08001528 	.word	0x08001528

08000974 <__retarget_lock_init_recursive>:
 8000974:	4770      	bx	lr

08000976 <__retarget_lock_acquire_recursive>:
 8000976:	4770      	bx	lr

08000978 <__retarget_lock_release_recursive>:
 8000978:	4770      	bx	lr
	...

0800097c <_free_r>:
 800097c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800097e:	2900      	cmp	r1, #0
 8000980:	d044      	beq.n	8000a0c <_free_r+0x90>
 8000982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000986:	9001      	str	r0, [sp, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	f1a1 0404 	sub.w	r4, r1, #4
 800098e:	bfb8      	it	lt
 8000990:	18e4      	addlt	r4, r4, r3
 8000992:	f000 f8df 	bl	8000b54 <__malloc_lock>
 8000996:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <_free_r+0x94>)
 8000998:	9801      	ldr	r0, [sp, #4]
 800099a:	6813      	ldr	r3, [r2, #0]
 800099c:	b933      	cbnz	r3, 80009ac <_free_r+0x30>
 800099e:	6063      	str	r3, [r4, #4]
 80009a0:	6014      	str	r4, [r2, #0]
 80009a2:	b003      	add	sp, #12
 80009a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80009a8:	f000 b8da 	b.w	8000b60 <__malloc_unlock>
 80009ac:	42a3      	cmp	r3, r4
 80009ae:	d908      	bls.n	80009c2 <_free_r+0x46>
 80009b0:	6825      	ldr	r5, [r4, #0]
 80009b2:	1961      	adds	r1, r4, r5
 80009b4:	428b      	cmp	r3, r1
 80009b6:	bf01      	itttt	eq
 80009b8:	6819      	ldreq	r1, [r3, #0]
 80009ba:	685b      	ldreq	r3, [r3, #4]
 80009bc:	1949      	addeq	r1, r1, r5
 80009be:	6021      	streq	r1, [r4, #0]
 80009c0:	e7ed      	b.n	800099e <_free_r+0x22>
 80009c2:	461a      	mov	r2, r3
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	b10b      	cbz	r3, 80009cc <_free_r+0x50>
 80009c8:	42a3      	cmp	r3, r4
 80009ca:	d9fa      	bls.n	80009c2 <_free_r+0x46>
 80009cc:	6811      	ldr	r1, [r2, #0]
 80009ce:	1855      	adds	r5, r2, r1
 80009d0:	42a5      	cmp	r5, r4
 80009d2:	d10b      	bne.n	80009ec <_free_r+0x70>
 80009d4:	6824      	ldr	r4, [r4, #0]
 80009d6:	4421      	add	r1, r4
 80009d8:	1854      	adds	r4, r2, r1
 80009da:	42a3      	cmp	r3, r4
 80009dc:	6011      	str	r1, [r2, #0]
 80009de:	d1e0      	bne.n	80009a2 <_free_r+0x26>
 80009e0:	681c      	ldr	r4, [r3, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	6053      	str	r3, [r2, #4]
 80009e6:	440c      	add	r4, r1
 80009e8:	6014      	str	r4, [r2, #0]
 80009ea:	e7da      	b.n	80009a2 <_free_r+0x26>
 80009ec:	d902      	bls.n	80009f4 <_free_r+0x78>
 80009ee:	230c      	movs	r3, #12
 80009f0:	6003      	str	r3, [r0, #0]
 80009f2:	e7d6      	b.n	80009a2 <_free_r+0x26>
 80009f4:	6825      	ldr	r5, [r4, #0]
 80009f6:	1961      	adds	r1, r4, r5
 80009f8:	428b      	cmp	r3, r1
 80009fa:	bf04      	itt	eq
 80009fc:	6819      	ldreq	r1, [r3, #0]
 80009fe:	685b      	ldreq	r3, [r3, #4]
 8000a00:	6063      	str	r3, [r4, #4]
 8000a02:	bf04      	itt	eq
 8000a04:	1949      	addeq	r1, r1, r5
 8000a06:	6021      	streq	r1, [r4, #0]
 8000a08:	6054      	str	r4, [r2, #4]
 8000a0a:	e7ca      	b.n	80009a2 <_free_r+0x26>
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bd30      	pop	{r4, r5, pc}
 8000a10:	200001c0 	.word	0x200001c0

08000a14 <sbrk_aligned>:
 8000a14:	b570      	push	{r4, r5, r6, lr}
 8000a16:	4e0e      	ldr	r6, [pc, #56]	; (8000a50 <sbrk_aligned+0x3c>)
 8000a18:	460c      	mov	r4, r1
 8000a1a:	6831      	ldr	r1, [r6, #0]
 8000a1c:	4605      	mov	r5, r0
 8000a1e:	b911      	cbnz	r1, 8000a26 <sbrk_aligned+0x12>
 8000a20:	f000 fcbc 	bl	800139c <_sbrk_r>
 8000a24:	6030      	str	r0, [r6, #0]
 8000a26:	4621      	mov	r1, r4
 8000a28:	4628      	mov	r0, r5
 8000a2a:	f000 fcb7 	bl	800139c <_sbrk_r>
 8000a2e:	1c43      	adds	r3, r0, #1
 8000a30:	d00a      	beq.n	8000a48 <sbrk_aligned+0x34>
 8000a32:	1cc4      	adds	r4, r0, #3
 8000a34:	f024 0403 	bic.w	r4, r4, #3
 8000a38:	42a0      	cmp	r0, r4
 8000a3a:	d007      	beq.n	8000a4c <sbrk_aligned+0x38>
 8000a3c:	1a21      	subs	r1, r4, r0
 8000a3e:	4628      	mov	r0, r5
 8000a40:	f000 fcac 	bl	800139c <_sbrk_r>
 8000a44:	3001      	adds	r0, #1
 8000a46:	d101      	bne.n	8000a4c <sbrk_aligned+0x38>
 8000a48:	f04f 34ff 	mov.w	r4, #4294967295
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	200001c4 	.word	0x200001c4

08000a54 <_malloc_r>:
 8000a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a58:	1ccd      	adds	r5, r1, #3
 8000a5a:	f025 0503 	bic.w	r5, r5, #3
 8000a5e:	3508      	adds	r5, #8
 8000a60:	2d0c      	cmp	r5, #12
 8000a62:	bf38      	it	cc
 8000a64:	250c      	movcc	r5, #12
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	4607      	mov	r7, r0
 8000a6a:	db01      	blt.n	8000a70 <_malloc_r+0x1c>
 8000a6c:	42a9      	cmp	r1, r5
 8000a6e:	d905      	bls.n	8000a7c <_malloc_r+0x28>
 8000a70:	230c      	movs	r3, #12
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	2600      	movs	r6, #0
 8000a76:	4630      	mov	r0, r6
 8000a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000b50 <_malloc_r+0xfc>
 8000a80:	f000 f868 	bl	8000b54 <__malloc_lock>
 8000a84:	f8d8 3000 	ldr.w	r3, [r8]
 8000a88:	461c      	mov	r4, r3
 8000a8a:	bb5c      	cbnz	r4, 8000ae4 <_malloc_r+0x90>
 8000a8c:	4629      	mov	r1, r5
 8000a8e:	4638      	mov	r0, r7
 8000a90:	f7ff ffc0 	bl	8000a14 <sbrk_aligned>
 8000a94:	1c43      	adds	r3, r0, #1
 8000a96:	4604      	mov	r4, r0
 8000a98:	d155      	bne.n	8000b46 <_malloc_r+0xf2>
 8000a9a:	f8d8 4000 	ldr.w	r4, [r8]
 8000a9e:	4626      	mov	r6, r4
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d145      	bne.n	8000b30 <_malloc_r+0xdc>
 8000aa4:	2c00      	cmp	r4, #0
 8000aa6:	d048      	beq.n	8000b3a <_malloc_r+0xe6>
 8000aa8:	6823      	ldr	r3, [r4, #0]
 8000aaa:	4631      	mov	r1, r6
 8000aac:	4638      	mov	r0, r7
 8000aae:	eb04 0903 	add.w	r9, r4, r3
 8000ab2:	f000 fc73 	bl	800139c <_sbrk_r>
 8000ab6:	4581      	cmp	r9, r0
 8000ab8:	d13f      	bne.n	8000b3a <_malloc_r+0xe6>
 8000aba:	6821      	ldr	r1, [r4, #0]
 8000abc:	1a6d      	subs	r5, r5, r1
 8000abe:	4629      	mov	r1, r5
 8000ac0:	4638      	mov	r0, r7
 8000ac2:	f7ff ffa7 	bl	8000a14 <sbrk_aligned>
 8000ac6:	3001      	adds	r0, #1
 8000ac8:	d037      	beq.n	8000b3a <_malloc_r+0xe6>
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	442b      	add	r3, r5
 8000ace:	6023      	str	r3, [r4, #0]
 8000ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d038      	beq.n	8000b4a <_malloc_r+0xf6>
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	42a2      	cmp	r2, r4
 8000adc:	d12b      	bne.n	8000b36 <_malloc_r+0xe2>
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	e00f      	b.n	8000b04 <_malloc_r+0xb0>
 8000ae4:	6822      	ldr	r2, [r4, #0]
 8000ae6:	1b52      	subs	r2, r2, r5
 8000ae8:	d41f      	bmi.n	8000b2a <_malloc_r+0xd6>
 8000aea:	2a0b      	cmp	r2, #11
 8000aec:	d917      	bls.n	8000b1e <_malloc_r+0xca>
 8000aee:	1961      	adds	r1, r4, r5
 8000af0:	42a3      	cmp	r3, r4
 8000af2:	6025      	str	r5, [r4, #0]
 8000af4:	bf18      	it	ne
 8000af6:	6059      	strne	r1, [r3, #4]
 8000af8:	6863      	ldr	r3, [r4, #4]
 8000afa:	bf08      	it	eq
 8000afc:	f8c8 1000 	streq.w	r1, [r8]
 8000b00:	5162      	str	r2, [r4, r5]
 8000b02:	604b      	str	r3, [r1, #4]
 8000b04:	4638      	mov	r0, r7
 8000b06:	f104 060b 	add.w	r6, r4, #11
 8000b0a:	f000 f829 	bl	8000b60 <__malloc_unlock>
 8000b0e:	f026 0607 	bic.w	r6, r6, #7
 8000b12:	1d23      	adds	r3, r4, #4
 8000b14:	1af2      	subs	r2, r6, r3
 8000b16:	d0ae      	beq.n	8000a76 <_malloc_r+0x22>
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	50a3      	str	r3, [r4, r2]
 8000b1c:	e7ab      	b.n	8000a76 <_malloc_r+0x22>
 8000b1e:	42a3      	cmp	r3, r4
 8000b20:	6862      	ldr	r2, [r4, #4]
 8000b22:	d1dd      	bne.n	8000ae0 <_malloc_r+0x8c>
 8000b24:	f8c8 2000 	str.w	r2, [r8]
 8000b28:	e7ec      	b.n	8000b04 <_malloc_r+0xb0>
 8000b2a:	4623      	mov	r3, r4
 8000b2c:	6864      	ldr	r4, [r4, #4]
 8000b2e:	e7ac      	b.n	8000a8a <_malloc_r+0x36>
 8000b30:	4634      	mov	r4, r6
 8000b32:	6876      	ldr	r6, [r6, #4]
 8000b34:	e7b4      	b.n	8000aa0 <_malloc_r+0x4c>
 8000b36:	4613      	mov	r3, r2
 8000b38:	e7cc      	b.n	8000ad4 <_malloc_r+0x80>
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4638      	mov	r0, r7
 8000b40:	f000 f80e 	bl	8000b60 <__malloc_unlock>
 8000b44:	e797      	b.n	8000a76 <_malloc_r+0x22>
 8000b46:	6025      	str	r5, [r4, #0]
 8000b48:	e7dc      	b.n	8000b04 <_malloc_r+0xb0>
 8000b4a:	605b      	str	r3, [r3, #4]
 8000b4c:	deff      	udf	#255	; 0xff
 8000b4e:	bf00      	nop
 8000b50:	200001c0 	.word	0x200001c0

08000b54 <__malloc_lock>:
 8000b54:	4801      	ldr	r0, [pc, #4]	; (8000b5c <__malloc_lock+0x8>)
 8000b56:	f7ff bf0e 	b.w	8000976 <__retarget_lock_acquire_recursive>
 8000b5a:	bf00      	nop
 8000b5c:	200001bc 	.word	0x200001bc

08000b60 <__malloc_unlock>:
 8000b60:	4801      	ldr	r0, [pc, #4]	; (8000b68 <__malloc_unlock+0x8>)
 8000b62:	f7ff bf09 	b.w	8000978 <__retarget_lock_release_recursive>
 8000b66:	bf00      	nop
 8000b68:	200001bc 	.word	0x200001bc

08000b6c <__sfputc_r>:
 8000b6c:	6893      	ldr	r3, [r2, #8]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	b410      	push	{r4}
 8000b74:	6093      	str	r3, [r2, #8]
 8000b76:	da08      	bge.n	8000b8a <__sfputc_r+0x1e>
 8000b78:	6994      	ldr	r4, [r2, #24]
 8000b7a:	42a3      	cmp	r3, r4
 8000b7c:	db01      	blt.n	8000b82 <__sfputc_r+0x16>
 8000b7e:	290a      	cmp	r1, #10
 8000b80:	d103      	bne.n	8000b8a <__sfputc_r+0x1e>
 8000b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b86:	f000 bb73 	b.w	8001270 <__swbuf_r>
 8000b8a:	6813      	ldr	r3, [r2, #0]
 8000b8c:	1c58      	adds	r0, r3, #1
 8000b8e:	6010      	str	r0, [r2, #0]
 8000b90:	7019      	strb	r1, [r3, #0]
 8000b92:	4608      	mov	r0, r1
 8000b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <__sfputs_r>:
 8000b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9c:	4606      	mov	r6, r0
 8000b9e:	460f      	mov	r7, r1
 8000ba0:	4614      	mov	r4, r2
 8000ba2:	18d5      	adds	r5, r2, r3
 8000ba4:	42ac      	cmp	r4, r5
 8000ba6:	d101      	bne.n	8000bac <__sfputs_r+0x12>
 8000ba8:	2000      	movs	r0, #0
 8000baa:	e007      	b.n	8000bbc <__sfputs_r+0x22>
 8000bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bb0:	463a      	mov	r2, r7
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	f7ff ffda 	bl	8000b6c <__sfputc_r>
 8000bb8:	1c43      	adds	r3, r0, #1
 8000bba:	d1f3      	bne.n	8000ba4 <__sfputs_r+0xa>
 8000bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000bc0 <_vfiprintf_r>:
 8000bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bc4:	460d      	mov	r5, r1
 8000bc6:	b09d      	sub	sp, #116	; 0x74
 8000bc8:	4614      	mov	r4, r2
 8000bca:	4698      	mov	r8, r3
 8000bcc:	4606      	mov	r6, r0
 8000bce:	b118      	cbz	r0, 8000bd8 <_vfiprintf_r+0x18>
 8000bd0:	6a03      	ldr	r3, [r0, #32]
 8000bd2:	b90b      	cbnz	r3, 8000bd8 <_vfiprintf_r+0x18>
 8000bd4:	f7ff fdca 	bl	800076c <__sinit>
 8000bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bda:	07d9      	lsls	r1, r3, #31
 8000bdc:	d405      	bmi.n	8000bea <_vfiprintf_r+0x2a>
 8000bde:	89ab      	ldrh	r3, [r5, #12]
 8000be0:	059a      	lsls	r2, r3, #22
 8000be2:	d402      	bmi.n	8000bea <_vfiprintf_r+0x2a>
 8000be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000be6:	f7ff fec6 	bl	8000976 <__retarget_lock_acquire_recursive>
 8000bea:	89ab      	ldrh	r3, [r5, #12]
 8000bec:	071b      	lsls	r3, r3, #28
 8000bee:	d501      	bpl.n	8000bf4 <_vfiprintf_r+0x34>
 8000bf0:	692b      	ldr	r3, [r5, #16]
 8000bf2:	b99b      	cbnz	r3, 8000c1c <_vfiprintf_r+0x5c>
 8000bf4:	4629      	mov	r1, r5
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	f000 fb78 	bl	80012ec <__swsetup_r>
 8000bfc:	b170      	cbz	r0, 8000c1c <_vfiprintf_r+0x5c>
 8000bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c00:	07dc      	lsls	r4, r3, #31
 8000c02:	d504      	bpl.n	8000c0e <_vfiprintf_r+0x4e>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	b01d      	add	sp, #116	; 0x74
 8000c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c0e:	89ab      	ldrh	r3, [r5, #12]
 8000c10:	0598      	lsls	r0, r3, #22
 8000c12:	d4f7      	bmi.n	8000c04 <_vfiprintf_r+0x44>
 8000c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c16:	f7ff feaf 	bl	8000978 <__retarget_lock_release_recursive>
 8000c1a:	e7f3      	b.n	8000c04 <_vfiprintf_r+0x44>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8000c20:	2320      	movs	r3, #32
 8000c22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c26:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c2a:	2330      	movs	r3, #48	; 0x30
 8000c2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000de0 <_vfiprintf_r+0x220>
 8000c30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c34:	f04f 0901 	mov.w	r9, #1
 8000c38:	4623      	mov	r3, r4
 8000c3a:	469a      	mov	sl, r3
 8000c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c40:	b10a      	cbz	r2, 8000c46 <_vfiprintf_r+0x86>
 8000c42:	2a25      	cmp	r2, #37	; 0x25
 8000c44:	d1f9      	bne.n	8000c3a <_vfiprintf_r+0x7a>
 8000c46:	ebba 0b04 	subs.w	fp, sl, r4
 8000c4a:	d00b      	beq.n	8000c64 <_vfiprintf_r+0xa4>
 8000c4c:	465b      	mov	r3, fp
 8000c4e:	4622      	mov	r2, r4
 8000c50:	4629      	mov	r1, r5
 8000c52:	4630      	mov	r0, r6
 8000c54:	f7ff ffa1 	bl	8000b9a <__sfputs_r>
 8000c58:	3001      	adds	r0, #1
 8000c5a:	f000 80a9 	beq.w	8000db0 <_vfiprintf_r+0x1f0>
 8000c5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c60:	445a      	add	r2, fp
 8000c62:	9209      	str	r2, [sp, #36]	; 0x24
 8000c64:	f89a 3000 	ldrb.w	r3, [sl]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f000 80a1 	beq.w	8000db0 <_vfiprintf_r+0x1f0>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c78:	f10a 0a01 	add.w	sl, sl, #1
 8000c7c:	9304      	str	r3, [sp, #16]
 8000c7e:	9307      	str	r3, [sp, #28]
 8000c80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c84:	931a      	str	r3, [sp, #104]	; 0x68
 8000c86:	4654      	mov	r4, sl
 8000c88:	2205      	movs	r2, #5
 8000c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c8e:	4854      	ldr	r0, [pc, #336]	; (8000de0 <_vfiprintf_r+0x220>)
 8000c90:	f7ff faa6 	bl	80001e0 <memchr>
 8000c94:	9a04      	ldr	r2, [sp, #16]
 8000c96:	b9d8      	cbnz	r0, 8000cd0 <_vfiprintf_r+0x110>
 8000c98:	06d1      	lsls	r1, r2, #27
 8000c9a:	bf44      	itt	mi
 8000c9c:	2320      	movmi	r3, #32
 8000c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ca2:	0713      	lsls	r3, r2, #28
 8000ca4:	bf44      	itt	mi
 8000ca6:	232b      	movmi	r3, #43	; 0x2b
 8000ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000cac:	f89a 3000 	ldrb.w	r3, [sl]
 8000cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8000cb2:	d015      	beq.n	8000ce0 <_vfiprintf_r+0x120>
 8000cb4:	9a07      	ldr	r2, [sp, #28]
 8000cb6:	4654      	mov	r4, sl
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f04f 0c0a 	mov.w	ip, #10
 8000cbe:	4621      	mov	r1, r4
 8000cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000cc4:	3b30      	subs	r3, #48	; 0x30
 8000cc6:	2b09      	cmp	r3, #9
 8000cc8:	d94d      	bls.n	8000d66 <_vfiprintf_r+0x1a6>
 8000cca:	b1b0      	cbz	r0, 8000cfa <_vfiprintf_r+0x13a>
 8000ccc:	9207      	str	r2, [sp, #28]
 8000cce:	e014      	b.n	8000cfa <_vfiprintf_r+0x13a>
 8000cd0:	eba0 0308 	sub.w	r3, r0, r8
 8000cd4:	fa09 f303 	lsl.w	r3, r9, r3
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	9304      	str	r3, [sp, #16]
 8000cdc:	46a2      	mov	sl, r4
 8000cde:	e7d2      	b.n	8000c86 <_vfiprintf_r+0xc6>
 8000ce0:	9b03      	ldr	r3, [sp, #12]
 8000ce2:	1d19      	adds	r1, r3, #4
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	9103      	str	r1, [sp, #12]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	bfbb      	ittet	lt
 8000cec:	425b      	neglt	r3, r3
 8000cee:	f042 0202 	orrlt.w	r2, r2, #2
 8000cf2:	9307      	strge	r3, [sp, #28]
 8000cf4:	9307      	strlt	r3, [sp, #28]
 8000cf6:	bfb8      	it	lt
 8000cf8:	9204      	strlt	r2, [sp, #16]
 8000cfa:	7823      	ldrb	r3, [r4, #0]
 8000cfc:	2b2e      	cmp	r3, #46	; 0x2e
 8000cfe:	d10c      	bne.n	8000d1a <_vfiprintf_r+0x15a>
 8000d00:	7863      	ldrb	r3, [r4, #1]
 8000d02:	2b2a      	cmp	r3, #42	; 0x2a
 8000d04:	d134      	bne.n	8000d70 <_vfiprintf_r+0x1b0>
 8000d06:	9b03      	ldr	r3, [sp, #12]
 8000d08:	1d1a      	adds	r2, r3, #4
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	9203      	str	r2, [sp, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	bfb8      	it	lt
 8000d12:	f04f 33ff 	movlt.w	r3, #4294967295
 8000d16:	3402      	adds	r4, #2
 8000d18:	9305      	str	r3, [sp, #20]
 8000d1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000df0 <_vfiprintf_r+0x230>
 8000d1e:	7821      	ldrb	r1, [r4, #0]
 8000d20:	2203      	movs	r2, #3
 8000d22:	4650      	mov	r0, sl
 8000d24:	f7ff fa5c 	bl	80001e0 <memchr>
 8000d28:	b138      	cbz	r0, 8000d3a <_vfiprintf_r+0x17a>
 8000d2a:	9b04      	ldr	r3, [sp, #16]
 8000d2c:	eba0 000a 	sub.w	r0, r0, sl
 8000d30:	2240      	movs	r2, #64	; 0x40
 8000d32:	4082      	lsls	r2, r0
 8000d34:	4313      	orrs	r3, r2
 8000d36:	3401      	adds	r4, #1
 8000d38:	9304      	str	r3, [sp, #16]
 8000d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d3e:	4829      	ldr	r0, [pc, #164]	; (8000de4 <_vfiprintf_r+0x224>)
 8000d40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d44:	2206      	movs	r2, #6
 8000d46:	f7ff fa4b 	bl	80001e0 <memchr>
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d03f      	beq.n	8000dce <_vfiprintf_r+0x20e>
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <_vfiprintf_r+0x228>)
 8000d50:	bb1b      	cbnz	r3, 8000d9a <_vfiprintf_r+0x1da>
 8000d52:	9b03      	ldr	r3, [sp, #12]
 8000d54:	3307      	adds	r3, #7
 8000d56:	f023 0307 	bic.w	r3, r3, #7
 8000d5a:	3308      	adds	r3, #8
 8000d5c:	9303      	str	r3, [sp, #12]
 8000d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d60:	443b      	add	r3, r7
 8000d62:	9309      	str	r3, [sp, #36]	; 0x24
 8000d64:	e768      	b.n	8000c38 <_vfiprintf_r+0x78>
 8000d66:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	e7a6      	b.n	8000cbe <_vfiprintf_r+0xfe>
 8000d70:	2300      	movs	r3, #0
 8000d72:	3401      	adds	r4, #1
 8000d74:	9305      	str	r3, [sp, #20]
 8000d76:	4619      	mov	r1, r3
 8000d78:	f04f 0c0a 	mov.w	ip, #10
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d82:	3a30      	subs	r2, #48	; 0x30
 8000d84:	2a09      	cmp	r2, #9
 8000d86:	d903      	bls.n	8000d90 <_vfiprintf_r+0x1d0>
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0c6      	beq.n	8000d1a <_vfiprintf_r+0x15a>
 8000d8c:	9105      	str	r1, [sp, #20]
 8000d8e:	e7c4      	b.n	8000d1a <_vfiprintf_r+0x15a>
 8000d90:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d94:	4604      	mov	r4, r0
 8000d96:	2301      	movs	r3, #1
 8000d98:	e7f0      	b.n	8000d7c <_vfiprintf_r+0x1bc>
 8000d9a:	ab03      	add	r3, sp, #12
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	462a      	mov	r2, r5
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <_vfiprintf_r+0x22c>)
 8000da2:	a904      	add	r1, sp, #16
 8000da4:	4630      	mov	r0, r6
 8000da6:	f3af 8000 	nop.w
 8000daa:	4607      	mov	r7, r0
 8000dac:	1c78      	adds	r0, r7, #1
 8000dae:	d1d6      	bne.n	8000d5e <_vfiprintf_r+0x19e>
 8000db0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000db2:	07d9      	lsls	r1, r3, #31
 8000db4:	d405      	bmi.n	8000dc2 <_vfiprintf_r+0x202>
 8000db6:	89ab      	ldrh	r3, [r5, #12]
 8000db8:	059a      	lsls	r2, r3, #22
 8000dba:	d402      	bmi.n	8000dc2 <_vfiprintf_r+0x202>
 8000dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000dbe:	f7ff fddb 	bl	8000978 <__retarget_lock_release_recursive>
 8000dc2:	89ab      	ldrh	r3, [r5, #12]
 8000dc4:	065b      	lsls	r3, r3, #25
 8000dc6:	f53f af1d 	bmi.w	8000c04 <_vfiprintf_r+0x44>
 8000dca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000dcc:	e71c      	b.n	8000c08 <_vfiprintf_r+0x48>
 8000dce:	ab03      	add	r3, sp, #12
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	462a      	mov	r2, r5
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <_vfiprintf_r+0x22c>)
 8000dd6:	a904      	add	r1, sp, #16
 8000dd8:	4630      	mov	r0, r6
 8000dda:	f000 f879 	bl	8000ed0 <_printf_i>
 8000dde:	e7e4      	b.n	8000daa <_vfiprintf_r+0x1ea>
 8000de0:	080014f0 	.word	0x080014f0
 8000de4:	080014fa 	.word	0x080014fa
 8000de8:	00000000 	.word	0x00000000
 8000dec:	08000b9b 	.word	0x08000b9b
 8000df0:	080014f6 	.word	0x080014f6

08000df4 <_printf_common>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	4616      	mov	r6, r2
 8000dfa:	4699      	mov	r9, r3
 8000dfc:	688a      	ldr	r2, [r1, #8]
 8000dfe:	690b      	ldr	r3, [r1, #16]
 8000e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e04:	4293      	cmp	r3, r2
 8000e06:	bfb8      	it	lt
 8000e08:	4613      	movlt	r3, r2
 8000e0a:	6033      	str	r3, [r6, #0]
 8000e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e10:	4607      	mov	r7, r0
 8000e12:	460c      	mov	r4, r1
 8000e14:	b10a      	cbz	r2, 8000e1a <_printf_common+0x26>
 8000e16:	3301      	adds	r3, #1
 8000e18:	6033      	str	r3, [r6, #0]
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	0699      	lsls	r1, r3, #26
 8000e1e:	bf42      	ittt	mi
 8000e20:	6833      	ldrmi	r3, [r6, #0]
 8000e22:	3302      	addmi	r3, #2
 8000e24:	6033      	strmi	r3, [r6, #0]
 8000e26:	6825      	ldr	r5, [r4, #0]
 8000e28:	f015 0506 	ands.w	r5, r5, #6
 8000e2c:	d106      	bne.n	8000e3c <_printf_common+0x48>
 8000e2e:	f104 0a19 	add.w	sl, r4, #25
 8000e32:	68e3      	ldr	r3, [r4, #12]
 8000e34:	6832      	ldr	r2, [r6, #0]
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	dc26      	bgt.n	8000e8a <_printf_common+0x96>
 8000e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e40:	1e13      	subs	r3, r2, #0
 8000e42:	6822      	ldr	r2, [r4, #0]
 8000e44:	bf18      	it	ne
 8000e46:	2301      	movne	r3, #1
 8000e48:	0692      	lsls	r2, r2, #26
 8000e4a:	d42b      	bmi.n	8000ea4 <_printf_common+0xb0>
 8000e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e50:	4649      	mov	r1, r9
 8000e52:	4638      	mov	r0, r7
 8000e54:	47c0      	blx	r8
 8000e56:	3001      	adds	r0, #1
 8000e58:	d01e      	beq.n	8000e98 <_printf_common+0xa4>
 8000e5a:	6823      	ldr	r3, [r4, #0]
 8000e5c:	6922      	ldr	r2, [r4, #16]
 8000e5e:	f003 0306 	and.w	r3, r3, #6
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf02      	ittt	eq
 8000e66:	68e5      	ldreq	r5, [r4, #12]
 8000e68:	6833      	ldreq	r3, [r6, #0]
 8000e6a:	1aed      	subeq	r5, r5, r3
 8000e6c:	68a3      	ldr	r3, [r4, #8]
 8000e6e:	bf0c      	ite	eq
 8000e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e74:	2500      	movne	r5, #0
 8000e76:	4293      	cmp	r3, r2
 8000e78:	bfc4      	itt	gt
 8000e7a:	1a9b      	subgt	r3, r3, r2
 8000e7c:	18ed      	addgt	r5, r5, r3
 8000e7e:	2600      	movs	r6, #0
 8000e80:	341a      	adds	r4, #26
 8000e82:	42b5      	cmp	r5, r6
 8000e84:	d11a      	bne.n	8000ebc <_printf_common+0xc8>
 8000e86:	2000      	movs	r0, #0
 8000e88:	e008      	b.n	8000e9c <_printf_common+0xa8>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	4652      	mov	r2, sl
 8000e8e:	4649      	mov	r1, r9
 8000e90:	4638      	mov	r0, r7
 8000e92:	47c0      	blx	r8
 8000e94:	3001      	adds	r0, #1
 8000e96:	d103      	bne.n	8000ea0 <_printf_common+0xac>
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea0:	3501      	adds	r5, #1
 8000ea2:	e7c6      	b.n	8000e32 <_printf_common+0x3e>
 8000ea4:	18e1      	adds	r1, r4, r3
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	2030      	movs	r0, #48	; 0x30
 8000eaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000eae:	4422      	add	r2, r4
 8000eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000eb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000eb8:	3302      	adds	r3, #2
 8000eba:	e7c7      	b.n	8000e4c <_printf_common+0x58>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	4622      	mov	r2, r4
 8000ec0:	4649      	mov	r1, r9
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	47c0      	blx	r8
 8000ec6:	3001      	adds	r0, #1
 8000ec8:	d0e6      	beq.n	8000e98 <_printf_common+0xa4>
 8000eca:	3601      	adds	r6, #1
 8000ecc:	e7d9      	b.n	8000e82 <_printf_common+0x8e>
	...

08000ed0 <_printf_i>:
 8000ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed4:	7e0f      	ldrb	r7, [r1, #24]
 8000ed6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ed8:	2f78      	cmp	r7, #120	; 0x78
 8000eda:	4691      	mov	r9, r2
 8000edc:	4680      	mov	r8, r0
 8000ede:	460c      	mov	r4, r1
 8000ee0:	469a      	mov	sl, r3
 8000ee2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000ee6:	d807      	bhi.n	8000ef8 <_printf_i+0x28>
 8000ee8:	2f62      	cmp	r7, #98	; 0x62
 8000eea:	d80a      	bhi.n	8000f02 <_printf_i+0x32>
 8000eec:	2f00      	cmp	r7, #0
 8000eee:	f000 80d4 	beq.w	800109a <_printf_i+0x1ca>
 8000ef2:	2f58      	cmp	r7, #88	; 0x58
 8000ef4:	f000 80c0 	beq.w	8001078 <_printf_i+0x1a8>
 8000ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000efc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f00:	e03a      	b.n	8000f78 <_printf_i+0xa8>
 8000f02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f06:	2b15      	cmp	r3, #21
 8000f08:	d8f6      	bhi.n	8000ef8 <_printf_i+0x28>
 8000f0a:	a101      	add	r1, pc, #4	; (adr r1, 8000f10 <_printf_i+0x40>)
 8000f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f10:	08000f69 	.word	0x08000f69
 8000f14:	08000f7d 	.word	0x08000f7d
 8000f18:	08000ef9 	.word	0x08000ef9
 8000f1c:	08000ef9 	.word	0x08000ef9
 8000f20:	08000ef9 	.word	0x08000ef9
 8000f24:	08000ef9 	.word	0x08000ef9
 8000f28:	08000f7d 	.word	0x08000f7d
 8000f2c:	08000ef9 	.word	0x08000ef9
 8000f30:	08000ef9 	.word	0x08000ef9
 8000f34:	08000ef9 	.word	0x08000ef9
 8000f38:	08000ef9 	.word	0x08000ef9
 8000f3c:	08001081 	.word	0x08001081
 8000f40:	08000fa9 	.word	0x08000fa9
 8000f44:	0800103b 	.word	0x0800103b
 8000f48:	08000ef9 	.word	0x08000ef9
 8000f4c:	08000ef9 	.word	0x08000ef9
 8000f50:	080010a3 	.word	0x080010a3
 8000f54:	08000ef9 	.word	0x08000ef9
 8000f58:	08000fa9 	.word	0x08000fa9
 8000f5c:	08000ef9 	.word	0x08000ef9
 8000f60:	08000ef9 	.word	0x08000ef9
 8000f64:	08001043 	.word	0x08001043
 8000f68:	682b      	ldr	r3, [r5, #0]
 8000f6a:	1d1a      	adds	r2, r3, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	602a      	str	r2, [r5, #0]
 8000f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e09f      	b.n	80010bc <_printf_i+0x1ec>
 8000f7c:	6820      	ldr	r0, [r4, #0]
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	0607      	lsls	r7, r0, #24
 8000f82:	f103 0104 	add.w	r1, r3, #4
 8000f86:	6029      	str	r1, [r5, #0]
 8000f88:	d501      	bpl.n	8000f8e <_printf_i+0xbe>
 8000f8a:	681e      	ldr	r6, [r3, #0]
 8000f8c:	e003      	b.n	8000f96 <_printf_i+0xc6>
 8000f8e:	0646      	lsls	r6, r0, #25
 8000f90:	d5fb      	bpl.n	8000f8a <_printf_i+0xba>
 8000f92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000f96:	2e00      	cmp	r6, #0
 8000f98:	da03      	bge.n	8000fa2 <_printf_i+0xd2>
 8000f9a:	232d      	movs	r3, #45	; 0x2d
 8000f9c:	4276      	negs	r6, r6
 8000f9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fa2:	485a      	ldr	r0, [pc, #360]	; (800110c <_printf_i+0x23c>)
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	e012      	b.n	8000fce <_printf_i+0xfe>
 8000fa8:	682b      	ldr	r3, [r5, #0]
 8000faa:	6820      	ldr	r0, [r4, #0]
 8000fac:	1d19      	adds	r1, r3, #4
 8000fae:	6029      	str	r1, [r5, #0]
 8000fb0:	0605      	lsls	r5, r0, #24
 8000fb2:	d501      	bpl.n	8000fb8 <_printf_i+0xe8>
 8000fb4:	681e      	ldr	r6, [r3, #0]
 8000fb6:	e002      	b.n	8000fbe <_printf_i+0xee>
 8000fb8:	0641      	lsls	r1, r0, #25
 8000fba:	d5fb      	bpl.n	8000fb4 <_printf_i+0xe4>
 8000fbc:	881e      	ldrh	r6, [r3, #0]
 8000fbe:	4853      	ldr	r0, [pc, #332]	; (800110c <_printf_i+0x23c>)
 8000fc0:	2f6f      	cmp	r7, #111	; 0x6f
 8000fc2:	bf0c      	ite	eq
 8000fc4:	2308      	moveq	r3, #8
 8000fc6:	230a      	movne	r3, #10
 8000fc8:	2100      	movs	r1, #0
 8000fca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000fce:	6865      	ldr	r5, [r4, #4]
 8000fd0:	60a5      	str	r5, [r4, #8]
 8000fd2:	2d00      	cmp	r5, #0
 8000fd4:	bfa2      	ittt	ge
 8000fd6:	6821      	ldrge	r1, [r4, #0]
 8000fd8:	f021 0104 	bicge.w	r1, r1, #4
 8000fdc:	6021      	strge	r1, [r4, #0]
 8000fde:	b90e      	cbnz	r6, 8000fe4 <_printf_i+0x114>
 8000fe0:	2d00      	cmp	r5, #0
 8000fe2:	d04b      	beq.n	800107c <_printf_i+0x1ac>
 8000fe4:	4615      	mov	r5, r2
 8000fe6:	fbb6 f1f3 	udiv	r1, r6, r3
 8000fea:	fb03 6711 	mls	r7, r3, r1, r6
 8000fee:	5dc7      	ldrb	r7, [r0, r7]
 8000ff0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000ff4:	4637      	mov	r7, r6
 8000ff6:	42bb      	cmp	r3, r7
 8000ff8:	460e      	mov	r6, r1
 8000ffa:	d9f4      	bls.n	8000fe6 <_printf_i+0x116>
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d10b      	bne.n	8001018 <_printf_i+0x148>
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	07de      	lsls	r6, r3, #31
 8001004:	d508      	bpl.n	8001018 <_printf_i+0x148>
 8001006:	6923      	ldr	r3, [r4, #16]
 8001008:	6861      	ldr	r1, [r4, #4]
 800100a:	4299      	cmp	r1, r3
 800100c:	bfde      	ittt	le
 800100e:	2330      	movle	r3, #48	; 0x30
 8001010:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001014:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001018:	1b52      	subs	r2, r2, r5
 800101a:	6122      	str	r2, [r4, #16]
 800101c:	f8cd a000 	str.w	sl, [sp]
 8001020:	464b      	mov	r3, r9
 8001022:	aa03      	add	r2, sp, #12
 8001024:	4621      	mov	r1, r4
 8001026:	4640      	mov	r0, r8
 8001028:	f7ff fee4 	bl	8000df4 <_printf_common>
 800102c:	3001      	adds	r0, #1
 800102e:	d14a      	bne.n	80010c6 <_printf_i+0x1f6>
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	b004      	add	sp, #16
 8001036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	6023      	str	r3, [r4, #0]
 8001042:	4833      	ldr	r0, [pc, #204]	; (8001110 <_printf_i+0x240>)
 8001044:	2778      	movs	r7, #120	; 0x78
 8001046:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800104a:	6823      	ldr	r3, [r4, #0]
 800104c:	6829      	ldr	r1, [r5, #0]
 800104e:	061f      	lsls	r7, r3, #24
 8001050:	f851 6b04 	ldr.w	r6, [r1], #4
 8001054:	d402      	bmi.n	800105c <_printf_i+0x18c>
 8001056:	065f      	lsls	r7, r3, #25
 8001058:	bf48      	it	mi
 800105a:	b2b6      	uxthmi	r6, r6
 800105c:	07df      	lsls	r7, r3, #31
 800105e:	bf48      	it	mi
 8001060:	f043 0320 	orrmi.w	r3, r3, #32
 8001064:	6029      	str	r1, [r5, #0]
 8001066:	bf48      	it	mi
 8001068:	6023      	strmi	r3, [r4, #0]
 800106a:	b91e      	cbnz	r6, 8001074 <_printf_i+0x1a4>
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	f023 0320 	bic.w	r3, r3, #32
 8001072:	6023      	str	r3, [r4, #0]
 8001074:	2310      	movs	r3, #16
 8001076:	e7a7      	b.n	8000fc8 <_printf_i+0xf8>
 8001078:	4824      	ldr	r0, [pc, #144]	; (800110c <_printf_i+0x23c>)
 800107a:	e7e4      	b.n	8001046 <_printf_i+0x176>
 800107c:	4615      	mov	r5, r2
 800107e:	e7bd      	b.n	8000ffc <_printf_i+0x12c>
 8001080:	682b      	ldr	r3, [r5, #0]
 8001082:	6826      	ldr	r6, [r4, #0]
 8001084:	6961      	ldr	r1, [r4, #20]
 8001086:	1d18      	adds	r0, r3, #4
 8001088:	6028      	str	r0, [r5, #0]
 800108a:	0635      	lsls	r5, r6, #24
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	d501      	bpl.n	8001094 <_printf_i+0x1c4>
 8001090:	6019      	str	r1, [r3, #0]
 8001092:	e002      	b.n	800109a <_printf_i+0x1ca>
 8001094:	0670      	lsls	r0, r6, #25
 8001096:	d5fb      	bpl.n	8001090 <_printf_i+0x1c0>
 8001098:	8019      	strh	r1, [r3, #0]
 800109a:	2300      	movs	r3, #0
 800109c:	6123      	str	r3, [r4, #16]
 800109e:	4615      	mov	r5, r2
 80010a0:	e7bc      	b.n	800101c <_printf_i+0x14c>
 80010a2:	682b      	ldr	r3, [r5, #0]
 80010a4:	1d1a      	adds	r2, r3, #4
 80010a6:	602a      	str	r2, [r5, #0]
 80010a8:	681d      	ldr	r5, [r3, #0]
 80010aa:	6862      	ldr	r2, [r4, #4]
 80010ac:	2100      	movs	r1, #0
 80010ae:	4628      	mov	r0, r5
 80010b0:	f7ff f896 	bl	80001e0 <memchr>
 80010b4:	b108      	cbz	r0, 80010ba <_printf_i+0x1ea>
 80010b6:	1b40      	subs	r0, r0, r5
 80010b8:	6060      	str	r0, [r4, #4]
 80010ba:	6863      	ldr	r3, [r4, #4]
 80010bc:	6123      	str	r3, [r4, #16]
 80010be:	2300      	movs	r3, #0
 80010c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010c4:	e7aa      	b.n	800101c <_printf_i+0x14c>
 80010c6:	6923      	ldr	r3, [r4, #16]
 80010c8:	462a      	mov	r2, r5
 80010ca:	4649      	mov	r1, r9
 80010cc:	4640      	mov	r0, r8
 80010ce:	47d0      	blx	sl
 80010d0:	3001      	adds	r0, #1
 80010d2:	d0ad      	beq.n	8001030 <_printf_i+0x160>
 80010d4:	6823      	ldr	r3, [r4, #0]
 80010d6:	079b      	lsls	r3, r3, #30
 80010d8:	d413      	bmi.n	8001102 <_printf_i+0x232>
 80010da:	68e0      	ldr	r0, [r4, #12]
 80010dc:	9b03      	ldr	r3, [sp, #12]
 80010de:	4298      	cmp	r0, r3
 80010e0:	bfb8      	it	lt
 80010e2:	4618      	movlt	r0, r3
 80010e4:	e7a6      	b.n	8001034 <_printf_i+0x164>
 80010e6:	2301      	movs	r3, #1
 80010e8:	4632      	mov	r2, r6
 80010ea:	4649      	mov	r1, r9
 80010ec:	4640      	mov	r0, r8
 80010ee:	47d0      	blx	sl
 80010f0:	3001      	adds	r0, #1
 80010f2:	d09d      	beq.n	8001030 <_printf_i+0x160>
 80010f4:	3501      	adds	r5, #1
 80010f6:	68e3      	ldr	r3, [r4, #12]
 80010f8:	9903      	ldr	r1, [sp, #12]
 80010fa:	1a5b      	subs	r3, r3, r1
 80010fc:	42ab      	cmp	r3, r5
 80010fe:	dcf2      	bgt.n	80010e6 <_printf_i+0x216>
 8001100:	e7eb      	b.n	80010da <_printf_i+0x20a>
 8001102:	2500      	movs	r5, #0
 8001104:	f104 0619 	add.w	r6, r4, #25
 8001108:	e7f5      	b.n	80010f6 <_printf_i+0x226>
 800110a:	bf00      	nop
 800110c:	08001501 	.word	0x08001501
 8001110:	08001512 	.word	0x08001512

08001114 <__sflush_r>:
 8001114:	898a      	ldrh	r2, [r1, #12]
 8001116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800111a:	4605      	mov	r5, r0
 800111c:	0710      	lsls	r0, r2, #28
 800111e:	460c      	mov	r4, r1
 8001120:	d458      	bmi.n	80011d4 <__sflush_r+0xc0>
 8001122:	684b      	ldr	r3, [r1, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	dc05      	bgt.n	8001134 <__sflush_r+0x20>
 8001128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800112a:	2b00      	cmp	r3, #0
 800112c:	dc02      	bgt.n	8001134 <__sflush_r+0x20>
 800112e:	2000      	movs	r0, #0
 8001130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001136:	2e00      	cmp	r6, #0
 8001138:	d0f9      	beq.n	800112e <__sflush_r+0x1a>
 800113a:	2300      	movs	r3, #0
 800113c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001140:	682f      	ldr	r7, [r5, #0]
 8001142:	6a21      	ldr	r1, [r4, #32]
 8001144:	602b      	str	r3, [r5, #0]
 8001146:	d032      	beq.n	80011ae <__sflush_r+0x9a>
 8001148:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800114a:	89a3      	ldrh	r3, [r4, #12]
 800114c:	075a      	lsls	r2, r3, #29
 800114e:	d505      	bpl.n	800115c <__sflush_r+0x48>
 8001150:	6863      	ldr	r3, [r4, #4]
 8001152:	1ac0      	subs	r0, r0, r3
 8001154:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001156:	b10b      	cbz	r3, 800115c <__sflush_r+0x48>
 8001158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800115a:	1ac0      	subs	r0, r0, r3
 800115c:	2300      	movs	r3, #0
 800115e:	4602      	mov	r2, r0
 8001160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001162:	6a21      	ldr	r1, [r4, #32]
 8001164:	4628      	mov	r0, r5
 8001166:	47b0      	blx	r6
 8001168:	1c43      	adds	r3, r0, #1
 800116a:	89a3      	ldrh	r3, [r4, #12]
 800116c:	d106      	bne.n	800117c <__sflush_r+0x68>
 800116e:	6829      	ldr	r1, [r5, #0]
 8001170:	291d      	cmp	r1, #29
 8001172:	d82b      	bhi.n	80011cc <__sflush_r+0xb8>
 8001174:	4a29      	ldr	r2, [pc, #164]	; (800121c <__sflush_r+0x108>)
 8001176:	410a      	asrs	r2, r1
 8001178:	07d6      	lsls	r6, r2, #31
 800117a:	d427      	bmi.n	80011cc <__sflush_r+0xb8>
 800117c:	2200      	movs	r2, #0
 800117e:	6062      	str	r2, [r4, #4]
 8001180:	04d9      	lsls	r1, r3, #19
 8001182:	6922      	ldr	r2, [r4, #16]
 8001184:	6022      	str	r2, [r4, #0]
 8001186:	d504      	bpl.n	8001192 <__sflush_r+0x7e>
 8001188:	1c42      	adds	r2, r0, #1
 800118a:	d101      	bne.n	8001190 <__sflush_r+0x7c>
 800118c:	682b      	ldr	r3, [r5, #0]
 800118e:	b903      	cbnz	r3, 8001192 <__sflush_r+0x7e>
 8001190:	6560      	str	r0, [r4, #84]	; 0x54
 8001192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001194:	602f      	str	r7, [r5, #0]
 8001196:	2900      	cmp	r1, #0
 8001198:	d0c9      	beq.n	800112e <__sflush_r+0x1a>
 800119a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800119e:	4299      	cmp	r1, r3
 80011a0:	d002      	beq.n	80011a8 <__sflush_r+0x94>
 80011a2:	4628      	mov	r0, r5
 80011a4:	f7ff fbea 	bl	800097c <_free_r>
 80011a8:	2000      	movs	r0, #0
 80011aa:	6360      	str	r0, [r4, #52]	; 0x34
 80011ac:	e7c0      	b.n	8001130 <__sflush_r+0x1c>
 80011ae:	2301      	movs	r3, #1
 80011b0:	4628      	mov	r0, r5
 80011b2:	47b0      	blx	r6
 80011b4:	1c41      	adds	r1, r0, #1
 80011b6:	d1c8      	bne.n	800114a <__sflush_r+0x36>
 80011b8:	682b      	ldr	r3, [r5, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0c5      	beq.n	800114a <__sflush_r+0x36>
 80011be:	2b1d      	cmp	r3, #29
 80011c0:	d001      	beq.n	80011c6 <__sflush_r+0xb2>
 80011c2:	2b16      	cmp	r3, #22
 80011c4:	d101      	bne.n	80011ca <__sflush_r+0xb6>
 80011c6:	602f      	str	r7, [r5, #0]
 80011c8:	e7b1      	b.n	800112e <__sflush_r+0x1a>
 80011ca:	89a3      	ldrh	r3, [r4, #12]
 80011cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d0:	81a3      	strh	r3, [r4, #12]
 80011d2:	e7ad      	b.n	8001130 <__sflush_r+0x1c>
 80011d4:	690f      	ldr	r7, [r1, #16]
 80011d6:	2f00      	cmp	r7, #0
 80011d8:	d0a9      	beq.n	800112e <__sflush_r+0x1a>
 80011da:	0793      	lsls	r3, r2, #30
 80011dc:	680e      	ldr	r6, [r1, #0]
 80011de:	bf08      	it	eq
 80011e0:	694b      	ldreq	r3, [r1, #20]
 80011e2:	600f      	str	r7, [r1, #0]
 80011e4:	bf18      	it	ne
 80011e6:	2300      	movne	r3, #0
 80011e8:	eba6 0807 	sub.w	r8, r6, r7
 80011ec:	608b      	str	r3, [r1, #8]
 80011ee:	f1b8 0f00 	cmp.w	r8, #0
 80011f2:	dd9c      	ble.n	800112e <__sflush_r+0x1a>
 80011f4:	6a21      	ldr	r1, [r4, #32]
 80011f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80011f8:	4643      	mov	r3, r8
 80011fa:	463a      	mov	r2, r7
 80011fc:	4628      	mov	r0, r5
 80011fe:	47b0      	blx	r6
 8001200:	2800      	cmp	r0, #0
 8001202:	dc06      	bgt.n	8001212 <__sflush_r+0xfe>
 8001204:	89a3      	ldrh	r3, [r4, #12]
 8001206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800120a:	81a3      	strh	r3, [r4, #12]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	e78e      	b.n	8001130 <__sflush_r+0x1c>
 8001212:	4407      	add	r7, r0
 8001214:	eba8 0800 	sub.w	r8, r8, r0
 8001218:	e7e9      	b.n	80011ee <__sflush_r+0xda>
 800121a:	bf00      	nop
 800121c:	dfbffffe 	.word	0xdfbffffe

08001220 <_fflush_r>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	690b      	ldr	r3, [r1, #16]
 8001224:	4605      	mov	r5, r0
 8001226:	460c      	mov	r4, r1
 8001228:	b913      	cbnz	r3, 8001230 <_fflush_r+0x10>
 800122a:	2500      	movs	r5, #0
 800122c:	4628      	mov	r0, r5
 800122e:	bd38      	pop	{r3, r4, r5, pc}
 8001230:	b118      	cbz	r0, 800123a <_fflush_r+0x1a>
 8001232:	6a03      	ldr	r3, [r0, #32]
 8001234:	b90b      	cbnz	r3, 800123a <_fflush_r+0x1a>
 8001236:	f7ff fa99 	bl	800076c <__sinit>
 800123a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f3      	beq.n	800122a <_fflush_r+0xa>
 8001242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001244:	07d0      	lsls	r0, r2, #31
 8001246:	d404      	bmi.n	8001252 <_fflush_r+0x32>
 8001248:	0599      	lsls	r1, r3, #22
 800124a:	d402      	bmi.n	8001252 <_fflush_r+0x32>
 800124c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800124e:	f7ff fb92 	bl	8000976 <__retarget_lock_acquire_recursive>
 8001252:	4628      	mov	r0, r5
 8001254:	4621      	mov	r1, r4
 8001256:	f7ff ff5d 	bl	8001114 <__sflush_r>
 800125a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800125c:	07da      	lsls	r2, r3, #31
 800125e:	4605      	mov	r5, r0
 8001260:	d4e4      	bmi.n	800122c <_fflush_r+0xc>
 8001262:	89a3      	ldrh	r3, [r4, #12]
 8001264:	059b      	lsls	r3, r3, #22
 8001266:	d4e1      	bmi.n	800122c <_fflush_r+0xc>
 8001268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800126a:	f7ff fb85 	bl	8000978 <__retarget_lock_release_recursive>
 800126e:	e7dd      	b.n	800122c <_fflush_r+0xc>

08001270 <__swbuf_r>:
 8001270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001272:	460e      	mov	r6, r1
 8001274:	4614      	mov	r4, r2
 8001276:	4605      	mov	r5, r0
 8001278:	b118      	cbz	r0, 8001282 <__swbuf_r+0x12>
 800127a:	6a03      	ldr	r3, [r0, #32]
 800127c:	b90b      	cbnz	r3, 8001282 <__swbuf_r+0x12>
 800127e:	f7ff fa75 	bl	800076c <__sinit>
 8001282:	69a3      	ldr	r3, [r4, #24]
 8001284:	60a3      	str	r3, [r4, #8]
 8001286:	89a3      	ldrh	r3, [r4, #12]
 8001288:	071a      	lsls	r2, r3, #28
 800128a:	d525      	bpl.n	80012d8 <__swbuf_r+0x68>
 800128c:	6923      	ldr	r3, [r4, #16]
 800128e:	b31b      	cbz	r3, 80012d8 <__swbuf_r+0x68>
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	6922      	ldr	r2, [r4, #16]
 8001294:	1a98      	subs	r0, r3, r2
 8001296:	6963      	ldr	r3, [r4, #20]
 8001298:	b2f6      	uxtb	r6, r6
 800129a:	4283      	cmp	r3, r0
 800129c:	4637      	mov	r7, r6
 800129e:	dc04      	bgt.n	80012aa <__swbuf_r+0x3a>
 80012a0:	4621      	mov	r1, r4
 80012a2:	4628      	mov	r0, r5
 80012a4:	f7ff ffbc 	bl	8001220 <_fflush_r>
 80012a8:	b9e0      	cbnz	r0, 80012e4 <__swbuf_r+0x74>
 80012aa:	68a3      	ldr	r3, [r4, #8]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	60a3      	str	r3, [r4, #8]
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	6022      	str	r2, [r4, #0]
 80012b6:	701e      	strb	r6, [r3, #0]
 80012b8:	6962      	ldr	r2, [r4, #20]
 80012ba:	1c43      	adds	r3, r0, #1
 80012bc:	429a      	cmp	r2, r3
 80012be:	d004      	beq.n	80012ca <__swbuf_r+0x5a>
 80012c0:	89a3      	ldrh	r3, [r4, #12]
 80012c2:	07db      	lsls	r3, r3, #31
 80012c4:	d506      	bpl.n	80012d4 <__swbuf_r+0x64>
 80012c6:	2e0a      	cmp	r6, #10
 80012c8:	d104      	bne.n	80012d4 <__swbuf_r+0x64>
 80012ca:	4621      	mov	r1, r4
 80012cc:	4628      	mov	r0, r5
 80012ce:	f7ff ffa7 	bl	8001220 <_fflush_r>
 80012d2:	b938      	cbnz	r0, 80012e4 <__swbuf_r+0x74>
 80012d4:	4638      	mov	r0, r7
 80012d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012d8:	4621      	mov	r1, r4
 80012da:	4628      	mov	r0, r5
 80012dc:	f000 f806 	bl	80012ec <__swsetup_r>
 80012e0:	2800      	cmp	r0, #0
 80012e2:	d0d5      	beq.n	8001290 <__swbuf_r+0x20>
 80012e4:	f04f 37ff 	mov.w	r7, #4294967295
 80012e8:	e7f4      	b.n	80012d4 <__swbuf_r+0x64>
	...

080012ec <__swsetup_r>:
 80012ec:	b538      	push	{r3, r4, r5, lr}
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <__swsetup_r+0xac>)
 80012f0:	4605      	mov	r5, r0
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	460c      	mov	r4, r1
 80012f6:	b118      	cbz	r0, 8001300 <__swsetup_r+0x14>
 80012f8:	6a03      	ldr	r3, [r0, #32]
 80012fa:	b90b      	cbnz	r3, 8001300 <__swsetup_r+0x14>
 80012fc:	f7ff fa36 	bl	800076c <__sinit>
 8001300:	89a3      	ldrh	r3, [r4, #12]
 8001302:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001306:	0718      	lsls	r0, r3, #28
 8001308:	d422      	bmi.n	8001350 <__swsetup_r+0x64>
 800130a:	06d9      	lsls	r1, r3, #27
 800130c:	d407      	bmi.n	800131e <__swsetup_r+0x32>
 800130e:	2309      	movs	r3, #9
 8001310:	602b      	str	r3, [r5, #0]
 8001312:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001316:	81a3      	strh	r3, [r4, #12]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	e034      	b.n	8001388 <__swsetup_r+0x9c>
 800131e:	0758      	lsls	r0, r3, #29
 8001320:	d512      	bpl.n	8001348 <__swsetup_r+0x5c>
 8001322:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001324:	b141      	cbz	r1, 8001338 <__swsetup_r+0x4c>
 8001326:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800132a:	4299      	cmp	r1, r3
 800132c:	d002      	beq.n	8001334 <__swsetup_r+0x48>
 800132e:	4628      	mov	r0, r5
 8001330:	f7ff fb24 	bl	800097c <_free_r>
 8001334:	2300      	movs	r3, #0
 8001336:	6363      	str	r3, [r4, #52]	; 0x34
 8001338:	89a3      	ldrh	r3, [r4, #12]
 800133a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800133e:	81a3      	strh	r3, [r4, #12]
 8001340:	2300      	movs	r3, #0
 8001342:	6063      	str	r3, [r4, #4]
 8001344:	6923      	ldr	r3, [r4, #16]
 8001346:	6023      	str	r3, [r4, #0]
 8001348:	89a3      	ldrh	r3, [r4, #12]
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	81a3      	strh	r3, [r4, #12]
 8001350:	6923      	ldr	r3, [r4, #16]
 8001352:	b94b      	cbnz	r3, 8001368 <__swsetup_r+0x7c>
 8001354:	89a3      	ldrh	r3, [r4, #12]
 8001356:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800135a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800135e:	d003      	beq.n	8001368 <__swsetup_r+0x7c>
 8001360:	4621      	mov	r1, r4
 8001362:	4628      	mov	r0, r5
 8001364:	f000 f850 	bl	8001408 <__smakebuf_r>
 8001368:	89a0      	ldrh	r0, [r4, #12]
 800136a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800136e:	f010 0301 	ands.w	r3, r0, #1
 8001372:	d00a      	beq.n	800138a <__swsetup_r+0x9e>
 8001374:	2300      	movs	r3, #0
 8001376:	60a3      	str	r3, [r4, #8]
 8001378:	6963      	ldr	r3, [r4, #20]
 800137a:	425b      	negs	r3, r3
 800137c:	61a3      	str	r3, [r4, #24]
 800137e:	6923      	ldr	r3, [r4, #16]
 8001380:	b943      	cbnz	r3, 8001394 <__swsetup_r+0xa8>
 8001382:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001386:	d1c4      	bne.n	8001312 <__swsetup_r+0x26>
 8001388:	bd38      	pop	{r3, r4, r5, pc}
 800138a:	0781      	lsls	r1, r0, #30
 800138c:	bf58      	it	pl
 800138e:	6963      	ldrpl	r3, [r4, #20]
 8001390:	60a3      	str	r3, [r4, #8]
 8001392:	e7f4      	b.n	800137e <__swsetup_r+0x92>
 8001394:	2000      	movs	r0, #0
 8001396:	e7f7      	b.n	8001388 <__swsetup_r+0x9c>
 8001398:	20000058 	.word	0x20000058

0800139c <_sbrk_r>:
 800139c:	b538      	push	{r3, r4, r5, lr}
 800139e:	4d06      	ldr	r5, [pc, #24]	; (80013b8 <_sbrk_r+0x1c>)
 80013a0:	2300      	movs	r3, #0
 80013a2:	4604      	mov	r4, r0
 80013a4:	4608      	mov	r0, r1
 80013a6:	602b      	str	r3, [r5, #0]
 80013a8:	f7ff f816 	bl	80003d8 <_sbrk>
 80013ac:	1c43      	adds	r3, r0, #1
 80013ae:	d102      	bne.n	80013b6 <_sbrk_r+0x1a>
 80013b0:	682b      	ldr	r3, [r5, #0]
 80013b2:	b103      	cbz	r3, 80013b6 <_sbrk_r+0x1a>
 80013b4:	6023      	str	r3, [r4, #0]
 80013b6:	bd38      	pop	{r3, r4, r5, pc}
 80013b8:	200001b8 	.word	0x200001b8

080013bc <__swhatbuf_r>:
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	460c      	mov	r4, r1
 80013c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013c4:	2900      	cmp	r1, #0
 80013c6:	b096      	sub	sp, #88	; 0x58
 80013c8:	4615      	mov	r5, r2
 80013ca:	461e      	mov	r6, r3
 80013cc:	da0d      	bge.n	80013ea <__swhatbuf_r+0x2e>
 80013ce:	89a3      	ldrh	r3, [r4, #12]
 80013d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80013d4:	f04f 0100 	mov.w	r1, #0
 80013d8:	bf0c      	ite	eq
 80013da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80013de:	2340      	movne	r3, #64	; 0x40
 80013e0:	2000      	movs	r0, #0
 80013e2:	6031      	str	r1, [r6, #0]
 80013e4:	602b      	str	r3, [r5, #0]
 80013e6:	b016      	add	sp, #88	; 0x58
 80013e8:	bd70      	pop	{r4, r5, r6, pc}
 80013ea:	466a      	mov	r2, sp
 80013ec:	f000 f848 	bl	8001480 <_fstat_r>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	dbec      	blt.n	80013ce <__swhatbuf_r+0x12>
 80013f4:	9901      	ldr	r1, [sp, #4]
 80013f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80013fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80013fe:	4259      	negs	r1, r3
 8001400:	4159      	adcs	r1, r3
 8001402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001406:	e7eb      	b.n	80013e0 <__swhatbuf_r+0x24>

08001408 <__smakebuf_r>:
 8001408:	898b      	ldrh	r3, [r1, #12]
 800140a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800140c:	079d      	lsls	r5, r3, #30
 800140e:	4606      	mov	r6, r0
 8001410:	460c      	mov	r4, r1
 8001412:	d507      	bpl.n	8001424 <__smakebuf_r+0x1c>
 8001414:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001418:	6023      	str	r3, [r4, #0]
 800141a:	6123      	str	r3, [r4, #16]
 800141c:	2301      	movs	r3, #1
 800141e:	6163      	str	r3, [r4, #20]
 8001420:	b002      	add	sp, #8
 8001422:	bd70      	pop	{r4, r5, r6, pc}
 8001424:	ab01      	add	r3, sp, #4
 8001426:	466a      	mov	r2, sp
 8001428:	f7ff ffc8 	bl	80013bc <__swhatbuf_r>
 800142c:	9900      	ldr	r1, [sp, #0]
 800142e:	4605      	mov	r5, r0
 8001430:	4630      	mov	r0, r6
 8001432:	f7ff fb0f 	bl	8000a54 <_malloc_r>
 8001436:	b948      	cbnz	r0, 800144c <__smakebuf_r+0x44>
 8001438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800143c:	059a      	lsls	r2, r3, #22
 800143e:	d4ef      	bmi.n	8001420 <__smakebuf_r+0x18>
 8001440:	f023 0303 	bic.w	r3, r3, #3
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	81a3      	strh	r3, [r4, #12]
 800144a:	e7e3      	b.n	8001414 <__smakebuf_r+0xc>
 800144c:	89a3      	ldrh	r3, [r4, #12]
 800144e:	6020      	str	r0, [r4, #0]
 8001450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001454:	81a3      	strh	r3, [r4, #12]
 8001456:	9b00      	ldr	r3, [sp, #0]
 8001458:	6163      	str	r3, [r4, #20]
 800145a:	9b01      	ldr	r3, [sp, #4]
 800145c:	6120      	str	r0, [r4, #16]
 800145e:	b15b      	cbz	r3, 8001478 <__smakebuf_r+0x70>
 8001460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001464:	4630      	mov	r0, r6
 8001466:	f000 f81d 	bl	80014a4 <_isatty_r>
 800146a:	b128      	cbz	r0, 8001478 <__smakebuf_r+0x70>
 800146c:	89a3      	ldrh	r3, [r4, #12]
 800146e:	f023 0303 	bic.w	r3, r3, #3
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	81a3      	strh	r3, [r4, #12]
 8001478:	89a3      	ldrh	r3, [r4, #12]
 800147a:	431d      	orrs	r5, r3
 800147c:	81a5      	strh	r5, [r4, #12]
 800147e:	e7cf      	b.n	8001420 <__smakebuf_r+0x18>

08001480 <_fstat_r>:
 8001480:	b538      	push	{r3, r4, r5, lr}
 8001482:	4d07      	ldr	r5, [pc, #28]	; (80014a0 <_fstat_r+0x20>)
 8001484:	2300      	movs	r3, #0
 8001486:	4604      	mov	r4, r0
 8001488:	4608      	mov	r0, r1
 800148a:	4611      	mov	r1, r2
 800148c:	602b      	str	r3, [r5, #0]
 800148e:	f7fe ff7a 	bl	8000386 <_fstat>
 8001492:	1c43      	adds	r3, r0, #1
 8001494:	d102      	bne.n	800149c <_fstat_r+0x1c>
 8001496:	682b      	ldr	r3, [r5, #0]
 8001498:	b103      	cbz	r3, 800149c <_fstat_r+0x1c>
 800149a:	6023      	str	r3, [r4, #0]
 800149c:	bd38      	pop	{r3, r4, r5, pc}
 800149e:	bf00      	nop
 80014a0:	200001b8 	.word	0x200001b8

080014a4 <_isatty_r>:
 80014a4:	b538      	push	{r3, r4, r5, lr}
 80014a6:	4d06      	ldr	r5, [pc, #24]	; (80014c0 <_isatty_r+0x1c>)
 80014a8:	2300      	movs	r3, #0
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	602b      	str	r3, [r5, #0]
 80014b0:	f7fe ff79 	bl	80003a6 <_isatty>
 80014b4:	1c43      	adds	r3, r0, #1
 80014b6:	d102      	bne.n	80014be <_isatty_r+0x1a>
 80014b8:	682b      	ldr	r3, [r5, #0]
 80014ba:	b103      	cbz	r3, 80014be <_isatty_r+0x1a>
 80014bc:	6023      	str	r3, [r4, #0]
 80014be:	bd38      	pop	{r3, r4, r5, pc}
 80014c0:	200001b8 	.word	0x200001b8

080014c4 <_init>:
 80014c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c6:	bf00      	nop
 80014c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ca:	bc08      	pop	{r3}
 80014cc:	469e      	mov	lr, r3
 80014ce:	4770      	bx	lr

080014d0 <_fini>:
 80014d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d2:	bf00      	nop
 80014d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014d6:	bc08      	pop	{r3}
 80014d8:	469e      	mov	lr, r3
 80014da:	4770      	bx	lr
